{"version":3,"file":"static/js/624.06f1402c.chunk.js","mappings":"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","sources":["pages/AppBody.tsx","components/PositionCard/Sushi.tsx","components/PositionCard/V2.tsx","pages/MigrateV2/index.tsx","utils/unwrappedToken.ts"],"sourcesContent":["import { PropsWithChildren } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Z_INDEX } from 'theme/zIndex'\r\n\r\ninterface BodyWrapperProps {\r\n  $margin?: string\r\n  $maxWidth?: string\r\n}\r\n\r\nexport const BodyWrapper = styled.main<BodyWrapperProps>`\r\n  position: relative;\r\n  margin-top: ${({ $margin }) => $margin ?? '0px'};\r\n  max-width: ${({ $maxWidth }) => $maxWidth ?? '420px'};\r\n  width: 100%;\r\n  background: ${({ theme }) => theme.surface1};\r\n  border-radius: 16px;\r\n  border: 1px solid ${({ theme }) => theme.surface3};\r\n  margin-top: 1rem;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  z-index: ${Z_INDEX.default};\r\n`\r\n\r\n/**\r\n * The styled container element that wraps the content of most pages and the tabs.\r\n */\r\nexport default function AppBody(props: PropsWithChildren<BodyWrapperProps>) {\r\n  return <BodyWrapper {...props} />\r\n}\r\n","import { Trans } from '@lingui/macro'\r\nimport { Token } from '@uniswap/sdk-core'\r\nimport Badge, { BadgeVariant } from 'components/Badge'\r\nimport { transparentize } from 'polished'\r\nimport { Link } from 'react-router-dom'\r\nimport { Text } from 'rebass'\r\nimport styled from 'styled-components'\r\n\r\nimport { useColor } from '../../hooks/useColor'\r\nimport { unwrappedToken } from '../../utils/unwrappedToken'\r\nimport { ButtonEmpty } from '../Button'\r\nimport { LightCard } from '../Card'\r\nimport { AutoColumn } from '../Column'\r\nimport DoubleCurrencyLogo from '../DoubleLogo'\r\nimport { CardNoise } from '../earn/styled'\r\nimport { AutoRow, RowFixed } from '../Row'\r\nimport { Dots } from '../swap/styled'\r\nimport { FixedHeightRow } from '.'\r\n\r\nconst StyledPositionCard = styled(LightCard)<{ bgColor: any }>`\r\n  border: none;\r\n  background: ${({ theme, bgColor }) =>\r\n    `radial-gradient(91.85% 100% at 1.84% 0%, ${transparentize(0.8, bgColor)} 0%, ${theme.surface2} 100%) `};\r\n  position: relative;\r\n  overflow: hidden;\r\n`\r\n\r\ninterface PositionCardProps {\r\n  tokenA: Token\r\n  tokenB: Token\r\n  liquidityToken: Token\r\n  border?: string\r\n}\r\n\r\nexport default function SushiPositionCard({ tokenA, tokenB, liquidityToken, border }: PositionCardProps) {\r\n  const currency0 = unwrappedToken(tokenA)\r\n  const currency1 = unwrappedToken(tokenB)\r\n\r\n  const backgroundColor = useColor(tokenA)\r\n\r\n  return (\r\n    <StyledPositionCard border={border} bgColor={backgroundColor}>\r\n      <CardNoise />\r\n      <AutoColumn gap=\"md\">\r\n        <FixedHeightRow>\r\n          <AutoRow gap=\"8px\">\r\n            <DoubleCurrencyLogo currency0={currency0} currency1={currency1} size={20} />\r\n            <Text fontWeight={535} fontSize={20}>\r\n              {!currency0 || !currency1 ? (\r\n                <Dots>\r\n                  <Trans>Loading</Trans>\r\n                </Dots>\r\n              ) : (\r\n                `${currency0.symbol}/${currency1.symbol}`\r\n              )}\r\n            </Text>\r\n\r\n            <Badge variant={BadgeVariant.WARNING}>Sushi</Badge>\r\n          </AutoRow>\r\n          <RowFixed gap=\"8px\">\r\n            <ButtonEmpty\r\n              padding=\"0px 35px 0px 0px\"\r\n              $borderRadius=\"12px\"\r\n              width=\"fit-content\"\r\n              as={Link}\r\n              to={`/migrate/v2/${liquidityToken.address}`}\r\n            >\r\n              <Trans>Migrate</Trans>\r\n            </ButtonEmpty>\r\n          </RowFixed>\r\n        </FixedHeightRow>\r\n      </AutoColumn>\r\n    </StyledPositionCard>\r\n  )\r\n}\r\n","import { Trans } from '@lingui/macro'\r\nimport { CurrencyAmount, Percent, Token } from '@uniswap/sdk-core'\r\nimport { Pair } from '@uniswap/v2-sdk'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport JSBI from 'jsbi'\r\nimport { transparentize } from 'polished'\r\nimport { useState } from 'react'\r\nimport { ChevronDown, ChevronUp } from 'react-feather'\r\nimport { Link } from 'react-router-dom'\r\nimport { Text } from 'rebass'\r\nimport styled from 'styled-components'\r\n\r\nimport { BIG_INT_ZERO } from '../../constants/misc'\r\nimport { useColor } from '../../hooks/useColor'\r\nimport { useTotalSupply } from '../../hooks/useTotalSupply'\r\nimport { useTokenBalance } from '../../state/connection/hooks'\r\nimport { currencyId } from '../../utils/currencyId'\r\nimport { unwrappedToken } from '../../utils/unwrappedToken'\r\nimport { ButtonEmpty, ButtonPrimary, ButtonSecondary } from '../Button'\r\nimport { LightCard } from '../Card'\r\nimport { AutoColumn } from '../Column'\r\nimport DoubleCurrencyLogo from '../DoubleLogo'\r\nimport { CardNoise } from '../earn/styled'\r\nimport CurrencyLogo from '../Logo/CurrencyLogo'\r\nimport { AutoRow, RowBetween, RowFixed } from '../Row'\r\nimport { Dots } from '../swap/styled'\r\nimport { FixedHeightRow } from '.'\r\n\r\nconst StyledPositionCard = styled(LightCard)<{ bgColor: any }>`\r\n  border: none;\r\n  background: ${({ theme, bgColor }) =>\r\n    `radial-gradient(91.85% 100% at 1.84% 0%, ${transparentize(0.8, bgColor)} 0%, ${theme.surface2} 100%) `};\r\n  position: relative;\r\n  overflow: hidden;\r\n`\r\n\r\ninterface PositionCardProps {\r\n  pair: Pair\r\n  showUnwrapped?: boolean\r\n  border?: string\r\n  stakedBalance?: CurrencyAmount<Token> // optional balance to indicate that liquidity is deposited in mining pool\r\n}\r\n\r\nexport default function V2PositionCard({ pair, border, stakedBalance }: PositionCardProps) {\r\n  const { account } = useWeb3React()\r\n\r\n  const currency0 = unwrappedToken(pair.token0)\r\n  const currency1 = unwrappedToken(pair.token1)\r\n\r\n  const [showMore, setShowMore] = useState(false)\r\n\r\n  const userDefaultPoolBalance = useTokenBalance(account ?? undefined, pair.liquidityToken)\r\n  const totalPoolTokens = useTotalSupply(pair.liquidityToken)\r\n\r\n  // if staked balance balance provided, add to standard liquidity amount\r\n  const userPoolBalance = stakedBalance ? userDefaultPoolBalance?.add(stakedBalance) : userDefaultPoolBalance\r\n\r\n  const poolTokenPercentage =\r\n    !!userPoolBalance &&\r\n    !!totalPoolTokens &&\r\n    JSBI.greaterThanOrEqual(totalPoolTokens.quotient, userPoolBalance.quotient)\r\n      ? new Percent(userPoolBalance.quotient, totalPoolTokens.quotient)\r\n      : undefined\r\n\r\n  const [token0Deposited, token1Deposited] =\r\n    !!pair &&\r\n    !!totalPoolTokens &&\r\n    !!userPoolBalance &&\r\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\r\n    JSBI.greaterThanOrEqual(totalPoolTokens.quotient, userPoolBalance.quotient)\r\n      ? [\r\n          pair.getLiquidityValue(pair.token0, totalPoolTokens, userPoolBalance, false),\r\n          pair.getLiquidityValue(pair.token1, totalPoolTokens, userPoolBalance, false),\r\n        ]\r\n      : [undefined, undefined]\r\n\r\n  const backgroundColor = useColor(pair?.token0)\r\n\r\n  return (\r\n    <StyledPositionCard border={border} bgColor={backgroundColor}>\r\n      <CardNoise />\r\n      <AutoColumn gap=\"md\">\r\n        <FixedHeightRow>\r\n          <AutoRow gap=\"8px\">\r\n            <DoubleCurrencyLogo currency0={currency0} currency1={currency1} size={20} />\r\n            <Text fontWeight={535} fontSize={20}>\r\n              {!currency0 || !currency1 ? (\r\n                <Dots>\r\n                  <Trans>Loading</Trans>\r\n                </Dots>\r\n              ) : (\r\n                `${currency0.symbol}/${currency1.symbol}`\r\n              )}\r\n            </Text>\r\n          </AutoRow>\r\n          <RowFixed gap=\"8px\">\r\n            <ButtonEmpty\r\n              padding=\"6px 8px\"\r\n              $borderRadius=\"12px\"\r\n              width=\"fit-content\"\r\n              onClick={() => setShowMore(!showMore)}\r\n            >\r\n              {showMore ? (\r\n                <>\r\n                  <Trans>Manage</Trans>\r\n                  <ChevronUp size=\"20\" style={{ marginLeft: '10px' }} />\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <Trans>Manage</Trans>\r\n                  <ChevronDown size=\"20\" style={{ marginLeft: '10px' }} />\r\n                </>\r\n              )}\r\n            </ButtonEmpty>\r\n          </RowFixed>\r\n        </FixedHeightRow>\r\n\r\n        {showMore && (\r\n          <AutoColumn gap=\"sm\">\r\n            <FixedHeightRow>\r\n              <Text fontSize={16} fontWeight={535}>\r\n                <Trans>Your total pool tokens:</Trans>\r\n              </Text>\r\n              <Text fontSize={16} fontWeight={535}>\r\n                {userPoolBalance ? userPoolBalance.toSignificant(4) : '-'}\r\n              </Text>\r\n            </FixedHeightRow>\r\n            {stakedBalance && (\r\n              <FixedHeightRow>\r\n                <Text fontSize={16} fontWeight={535}>\r\n                  <Trans>Pool tokens in rewards pool:</Trans>\r\n                </Text>\r\n                <Text fontSize={16} fontWeight={535}>\r\n                  {stakedBalance.toSignificant(4)}\r\n                </Text>\r\n              </FixedHeightRow>\r\n            )}\r\n            <FixedHeightRow>\r\n              <RowFixed>\r\n                <Text fontSize={16} fontWeight={535}>\r\n                  <Trans>Pooled {currency0.symbol}:</Trans>\r\n                </Text>\r\n              </RowFixed>\r\n              {token0Deposited ? (\r\n                <RowFixed>\r\n                  <Text fontSize={16} fontWeight={535} marginLeft=\"6px\">\r\n                    {token0Deposited?.toSignificant(6)}\r\n                  </Text>\r\n                  <CurrencyLogo size=\"20px\" style={{ marginLeft: '8px' }} currency={currency0} />\r\n                </RowFixed>\r\n              ) : (\r\n                '-'\r\n              )}\r\n            </FixedHeightRow>\r\n\r\n            <FixedHeightRow>\r\n              <RowFixed>\r\n                <Text fontSize={16} fontWeight={535}>\r\n                  <Trans>Pooled {currency1.symbol}:</Trans>\r\n                </Text>\r\n              </RowFixed>\r\n              {token1Deposited ? (\r\n                <RowFixed>\r\n                  <Text fontSize={16} fontWeight={535} marginLeft=\"6px\">\r\n                    {token1Deposited?.toSignificant(6)}\r\n                  </Text>\r\n                  <CurrencyLogo size=\"20px\" style={{ marginLeft: '8px' }} currency={currency1} />\r\n                </RowFixed>\r\n              ) : (\r\n                '-'\r\n              )}\r\n            </FixedHeightRow>\r\n\r\n            <FixedHeightRow>\r\n              <Text fontSize={16} fontWeight={535}>\r\n                <Trans>Your pool share:</Trans>\r\n              </Text>\r\n              <Text fontSize={16} fontWeight={535}>\r\n                {poolTokenPercentage\r\n                  ? (poolTokenPercentage.toFixed(2) === '0.00' ? '<0.01' : poolTokenPercentage.toFixed(2)) + '%'\r\n                  : '-'}\r\n              </Text>\r\n            </FixedHeightRow>\r\n\r\n            {userDefaultPoolBalance && JSBI.greaterThan(userDefaultPoolBalance.quotient, BIG_INT_ZERO) && (\r\n              <RowBetween marginTop=\"10px\">\r\n                <ButtonPrimary\r\n                  padding=\"8px\"\r\n                  $borderRadius=\"8px\"\r\n                  as={Link}\r\n                  to={`/migrate/v2/${pair.liquidityToken.address}`}\r\n                  width=\"64%\"\r\n                >\r\n                  <Trans>Migrate</Trans>\r\n                </ButtonPrimary>\r\n                <ButtonSecondary\r\n                  padding=\"8px\"\r\n                  $borderRadius=\"8px\"\r\n                  as={Link}\r\n                  width=\"32%\"\r\n                  to={`/remove/v2/${currencyId(currency0)}/${currencyId(currency1)}`}\r\n                >\r\n                  <Trans>Remove</Trans>\r\n                </ButtonSecondary>\r\n              </RowBetween>\r\n            )}\r\n          </AutoColumn>\r\n        )}\r\n      </AutoColumn>\r\n    </StyledPositionCard>\r\n  )\r\n}\r\n","import { getCreate2Address } from '@ethersproject/address'\r\nimport { keccak256, pack } from '@ethersproject/solidity'\r\nimport { Trans } from '@lingui/macro'\r\nimport { Token, V2_FACTORY_ADDRESSES } from '@uniswap/sdk-core'\r\nimport { Pair } from '@uniswap/v2-sdk'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport MigrateSushiPositionCard from 'components/PositionCard/Sushi'\r\nimport MigrateV2PositionCard from 'components/PositionCard/V2'\r\nimport { SwitchLocaleLink } from 'components/SwitchLocaleLink'\r\nimport { V2Unsupported } from 'components/V2Unsupported'\r\nimport { useNetworkSupportsV2 } from 'hooks/useNetworkSupportsV2'\r\nimport { PairState, useV2Pairs } from 'hooks/useV2Pairs'\r\nimport { ReactNode, useMemo } from 'react'\r\nimport { Text } from 'rebass'\r\nimport { useTheme } from 'styled-components'\r\nimport { BackArrowLink, StyledInternalLink, ThemedText } from 'theme/components'\r\n\r\nimport { LightCard } from '../../components/Card'\r\nimport { AutoColumn } from '../../components/Column'\r\nimport QuestionHelper from '../../components/QuestionHelper'\r\nimport { AutoRow } from '../../components/Row'\r\nimport { Dots } from '../../components/swap/styled'\r\nimport { useTokenBalancesWithLoadingIndicator } from '../../state/connection/hooks'\r\nimport { toV2LiquidityToken, useTrackedTokenPairs } from '../../state/user/hooks'\r\nimport { BodyWrapper } from '../AppBody'\r\n\r\nfunction EmptyState({ message }: { message: ReactNode }) {\r\n  return (\r\n    <AutoColumn style={{ minHeight: 200, justifyContent: 'center', alignItems: 'center' }}>\r\n      <ThemedText.DeprecatedBody>{message}</ThemedText.DeprecatedBody>\r\n    </AutoColumn>\r\n  )\r\n}\r\n\r\n// quick hack because sushi init code hash is different\r\nconst computeSushiPairAddress = ({ tokenA, tokenB }: { tokenA: Token; tokenB: Token }): string => {\r\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\r\n  return getCreate2Address(\r\n    '0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac',\r\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\r\n    '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303'\r\n  )\r\n}\r\n\r\n/**\r\n * Given two tokens return the sushiswap liquidity token that represents its liquidity shares\r\n * @param tokenA one of the two tokens\r\n * @param tokenB the other token\r\n */\r\nfunction toSushiLiquidityToken([tokenA, tokenB]: [Token, Token]): Token {\r\n  return new Token(tokenA.chainId, computeSushiPairAddress({ tokenA, tokenB }), 18, 'SLP', 'SushiSwap LP Token')\r\n}\r\n\r\nexport default function MigrateV2() {\r\n  const theme = useTheme()\r\n  const { account, chainId } = useWeb3React()\r\n\r\n  const v2FactoryAddress = chainId ? V2_FACTORY_ADDRESSES[chainId] : undefined\r\n\r\n  // fetch the user's balances of all tracked V2 LP tokens\r\n  const trackedTokenPairs = useTrackedTokenPairs()\r\n\r\n  // calculate v2 + sushi pair contract addresses for all token pairs\r\n  const tokenPairsWithLiquidityTokens = useMemo(\r\n    () =>\r\n      trackedTokenPairs.map((tokens) => {\r\n        // sushi liquidity token or null\r\n        const sushiLiquidityToken = chainId === 1 ? toSushiLiquidityToken(tokens) : null\r\n        return {\r\n          v2liquidityToken: v2FactoryAddress ? toV2LiquidityToken(tokens) : undefined,\r\n          sushiLiquidityToken,\r\n          tokens,\r\n        }\r\n      }),\r\n    [trackedTokenPairs, chainId, v2FactoryAddress]\r\n  )\r\n\r\n  //  get pair liquidity token addresses for balance-fetching purposes\r\n  const allLiquidityTokens = useMemo(() => {\r\n    const v2 = tokenPairsWithLiquidityTokens.map(({ v2liquidityToken }) => v2liquidityToken)\r\n    const sushi = tokenPairsWithLiquidityTokens\r\n      .map(({ sushiLiquidityToken }) => sushiLiquidityToken)\r\n      .filter((token): token is Token => !!token)\r\n\r\n    return [...v2, ...sushi]\r\n  }, [tokenPairsWithLiquidityTokens])\r\n\r\n  // fetch pair balances\r\n  const [pairBalances, fetchingPairBalances] = useTokenBalancesWithLoadingIndicator(\r\n    account ?? undefined,\r\n    allLiquidityTokens\r\n  )\r\n\r\n  // filter for v2 liquidity tokens that the user has a balance in\r\n  const tokenPairsWithV2Balance = useMemo(() => {\r\n    if (fetchingPairBalances) return []\r\n\r\n    return tokenPairsWithLiquidityTokens\r\n      .filter(({ v2liquidityToken }) => v2liquidityToken && pairBalances[v2liquidityToken.address]?.greaterThan(0))\r\n      .map((tokenPairsWithLiquidityTokens) => tokenPairsWithLiquidityTokens.tokens)\r\n  }, [fetchingPairBalances, tokenPairsWithLiquidityTokens, pairBalances])\r\n\r\n  // filter for v2 liquidity tokens that the user has a balance in\r\n  const tokenPairsWithSushiBalance = useMemo(() => {\r\n    if (fetchingPairBalances) return []\r\n\r\n    return tokenPairsWithLiquidityTokens.filter(\r\n      ({ sushiLiquidityToken }) => !!sushiLiquidityToken && pairBalances[sushiLiquidityToken.address]?.greaterThan(0)\r\n    )\r\n  }, [fetchingPairBalances, tokenPairsWithLiquidityTokens, pairBalances])\r\n\r\n  const v2Pairs = useV2Pairs(tokenPairsWithV2Balance)\r\n  const v2IsLoading = fetchingPairBalances || v2Pairs.some(([pairState]) => pairState === PairState.LOADING)\r\n\r\n  const networkSupportsV2 = useNetworkSupportsV2()\r\n  if (!networkSupportsV2) return <V2Unsupported />\r\n\r\n  return (\r\n    <>\r\n      <BodyWrapper style={{ padding: 24 }}>\r\n        <AutoColumn gap=\"16px\">\r\n          <AutoRow style={{ alignItems: 'center', justifyContent: 'space-between' }} gap=\"8px\">\r\n            <BackArrowLink to=\"/pools\" />\r\n            <ThemedText.DeprecatedMediumHeader>\r\n              <Trans>Migrate V2 liquidity</Trans>\r\n            </ThemedText.DeprecatedMediumHeader>\r\n            <div>\r\n              <QuestionHelper text={<Trans>Migrate your liquidity tokens from Uniswap V2 to Uniswap V3.</Trans>} />\r\n            </div>\r\n          </AutoRow>\r\n\r\n          <ThemedText.DeprecatedBody style={{ marginBottom: 8, fontWeight: 485 }}>\r\n            <Trans>\r\n              For each pool shown below, click migrate to remove your liquidity from Uniswap V2 and deposit it into\r\n              Uniswap V3.\r\n            </Trans>\r\n          </ThemedText.DeprecatedBody>\r\n\r\n          {!account ? (\r\n            <LightCard padding=\"40px\">\r\n              <ThemedText.DeprecatedBody color={theme.neutral3} textAlign=\"center\">\r\n                <Trans>Connect to a wallet to view your V2 liquidity.</Trans>\r\n              </ThemedText.DeprecatedBody>\r\n            </LightCard>\r\n          ) : v2IsLoading ? (\r\n            <LightCard padding=\"40px\">\r\n              <ThemedText.DeprecatedBody color={theme.neutral3} textAlign=\"center\">\r\n                <Dots>\r\n                  <Trans>Loading</Trans>\r\n                </Dots>\r\n              </ThemedText.DeprecatedBody>\r\n            </LightCard>\r\n          ) : v2Pairs.filter(([, pair]) => !!pair).length > 0 ? (\r\n            <>\r\n              {v2Pairs\r\n                .filter(([, pair]) => !!pair)\r\n                .map(([, pair]) => (\r\n                  <MigrateV2PositionCard key={(pair as Pair).liquidityToken.address} pair={pair as Pair} />\r\n                ))}\r\n\r\n              {tokenPairsWithSushiBalance.map(({ sushiLiquidityToken, tokens }) => {\r\n                return (\r\n                  <MigrateSushiPositionCard\r\n                    key={(sushiLiquidityToken as Token).address}\r\n                    tokenA={tokens[0]}\r\n                    tokenB={tokens[1]}\r\n                    liquidityToken={sushiLiquidityToken as Token}\r\n                  />\r\n                )\r\n              })}\r\n            </>\r\n          ) : (\r\n            <EmptyState message={<Trans>No V2 liquidity found.</Trans>} />\r\n          )}\r\n\r\n          <AutoColumn justify=\"center\" gap=\"md\">\r\n            <Text textAlign=\"center\" fontSize={14} style={{ padding: '.5rem 0 .5rem 0' }}>\r\n              <Trans>\r\n                Don’t see one of your v2 positions?{' '}\r\n                <StyledInternalLink id=\"import-pool-link\" to=\"/pools/v2/find\">\r\n                  Import it.\r\n                </StyledInternalLink>\r\n              </Trans>\r\n            </Text>\r\n          </AutoColumn>\r\n        </AutoColumn>\r\n      </BodyWrapper>\r\n      <SwitchLocaleLink />\r\n    </>\r\n  )\r\n}\r\n","import { Currency } from '@uniswap/sdk-core'\r\nimport { asSupportedChain } from 'constants/chains'\r\n\r\nimport { nativeOnChain, WRAPPED_NATIVE_CURRENCY } from '../constants/tokens'\r\n\r\nexport function unwrappedToken(currency: Currency): Currency {\r\n  if (currency.isNative) return currency\r\n  const formattedChainId = asSupportedChain(currency.chainId)\r\n  if (formattedChainId && WRAPPED_NATIVE_CURRENCY[formattedChainId]?.equals(currency))\r\n    return nativeOnChain(currency.chainId)\r\n  return currency\r\n}\r\n"],"names":["BodyWrapper","styled","main","$margin","$maxWidth","theme","surface1","surface3","Z_INDEX","default","AppBody","props","StyledPositionCard","LightCard","bgColor","transparentize","surface2","SushiPositionCard","tokenA","tokenB","liquidityToken","border","currency0","unwrappedToken","currency1","backgroundColor","useColor","CardNoise","AutoColumn","gap","FixedHeightRow","AutoRow","DoubleCurrencyLogo","size","Text","fontWeight","fontSize","symbol","Dots","Badge","variant","BadgeVariant","WARNING","RowFixed","ButtonEmpty","padding","$borderRadius","width","as","Link","to","address","V2PositionCard","pair","stakedBalance","account","useWeb3React","token0","token1","showMore","setShowMore","useState","userDefaultPoolBalance","useTokenBalance","undefined","totalPoolTokens","useTotalSupply","userPoolBalance","add","poolTokenPercentage","JSBI","quotient","Percent","token0Deposited","token1Deposited","getLiquidityValue","onClick","ChevronUp","style","marginLeft","ChevronDown","toSignificant","CurrencyLogo","currency","toFixed","BIG_INT_ZERO","RowBetween","marginTop","ButtonPrimary","ButtonSecondary","currencyId","EmptyState","message","minHeight","justifyContent","alignItems","ThemedText","DeprecatedBody","computeSushiPairAddress","sortsBefore","getCreate2Address","keccak256","pack","MigrateV2","useTheme","chainId","v2FactoryAddress","V2_FACTORY_ADDRESSES","trackedTokenPairs","useTrackedTokenPairs","tokenPairsWithLiquidityTokens","useMemo","map","tokens","sushiLiquidityToken","Token","toSushiLiquidityToken","v2liquidityToken","toV2LiquidityToken","allLiquidityTokens","filter","token","pairBalances","fetchingPairBalances","useTokenBalancesWithLoadingIndicator","tokenPairsWithV2Balance","greaterThan","tokenPairsWithSushiBalance","v2Pairs","useV2Pairs","v2IsLoading","some","pairState","PairState","LOADING","useNetworkSupportsV2","BackArrowLink","DeprecatedMediumHeader","div","QuestionHelper","text","marginBottom","color","neutral3","textAlign","length","MigrateV2PositionCard","MigrateSushiPositionCard","justify","StyledInternalLink","id","SwitchLocaleLink","V2Unsupported","isNative","formattedChainId","asSupportedChain","WRAPPED_NATIVE_CURRENCY","equals","nativeOnChain"],"sourceRoot":""}