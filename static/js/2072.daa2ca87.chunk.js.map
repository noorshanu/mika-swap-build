{"version":3,"file":"static/js/2072.daa2ca87.chunk.js","mappings":"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","sources":["components/FormattedCurrencyAmount/index.tsx","components/Toggle/MultiToggle.tsx","components/RateToggle/index.tsx","components/V2Unsupported/index.tsx","../node_modules/@apollo/client/link/core/concat.js","graphql/thegraph/apollo.ts","hooks/useNetworkSupportsV2.ts","hooks/usePools.ts","hooks/useTotalSupply.ts","hooks/useERC20Permit.ts","hooks/useV2LiquidityTokenPermit.ts","pages/MigrateV2/MigrateV2Pair.tsx","lib/utils/formatLocaleNumber.ts","utils/formatCurrencyAmount.ts","utils/unwrappedToken.ts"],"sourcesContent":["import { Currency, CurrencyAmount, Fraction } from '@uniswap/sdk-core'\r\nimport JSBI from 'jsbi'\r\n\r\nconst CURRENCY_AMOUNT_MIN = new Fraction(JSBI.BigInt(1), JSBI.BigInt(1000000))\r\n\r\nexport default function FormattedCurrencyAmount({\r\n  currencyAmount,\r\n  significantDigits = 4,\r\n}: {\r\n  currencyAmount: CurrencyAmount<Currency>\r\n  significantDigits?: number\r\n}) {\r\n  return (\r\n    <>\r\n      {currencyAmount.equalTo(JSBI.BigInt(0))\r\n        ? '0'\r\n        : currencyAmount.greaterThan(CURRENCY_AMOUNT_MIN)\r\n        ? currencyAmount.toSignificant(significantDigits)\r\n        : `<${CURRENCY_AMOUNT_MIN.toSignificant(1)}`}\r\n    </>\r\n  )\r\n}\r\n","import styled from 'styled-components'\r\n\r\nexport const ToggleWrapper = styled.button<{ width?: string }>`\r\n  display: flex;\r\n  align-items: center;\r\n  width: ${({ width }) => width ?? '100%'};\r\n  padding: 1px;\r\n  background: ${({ theme }) => theme.surface2};\r\n  border-radius: 8px;\r\n  border: ${({ theme }) => '1px solid ' + theme.surface3};\r\n  cursor: pointer;\r\n  outline: none;\r\n`\r\n\r\nexport const ToggleElement = styled.span<{ isActive?: boolean; fontSize?: string }>`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  padding: 4px 0.5rem;\r\n  border-radius: 6px;\r\n  justify-content: center;\r\n  height: 100%;\r\n  background: ${({ theme, isActive }) => (isActive ? theme.surface1 : 'none')};\r\n  color: ${({ theme, isActive }) => (isActive ? theme.neutral1 : theme.neutral3)};\r\n  font-size: ${({ fontSize }) => fontSize ?? '1rem'};\r\n  font-weight: 535;\r\n  white-space: nowrap;\r\n  :hover {\r\n    user-select: initial;\r\n    color: ${({ theme, isActive }) => (isActive ? theme.neutral2 : theme.neutral3)};\r\n  }\r\n`\r\n","import { Trans } from '@lingui/macro'\r\nimport { Currency } from '@uniswap/sdk-core'\r\nimport { ToggleElement, ToggleWrapper } from 'components/Toggle/MultiToggle'\r\n\r\n// the order of displayed base currencies from left to right is always in sort order\r\n// currencyA is treated as the preferred base currency\r\nexport default function RateToggle({\r\n  currencyA,\r\n  currencyB,\r\n  handleRateToggle,\r\n}: {\r\n  currencyA: Currency\r\n  currencyB: Currency\r\n  handleRateToggle: () => void\r\n}) {\r\n  const tokenA = currencyA?.wrapped\r\n  const tokenB = currencyB?.wrapped\r\n\r\n  const isSorted = tokenA && tokenB && tokenA.sortsBefore(tokenB)\r\n\r\n  return tokenA && tokenB ? (\r\n    <div style={{ width: 'fit-content', display: 'flex', alignItems: 'center' }} onClick={handleRateToggle}>\r\n      <ToggleWrapper width=\"fit-content\">\r\n        <ToggleElement isActive={isSorted} fontSize=\"12px\">\r\n          <Trans>{isSorted ? currencyA.symbol : currencyB.symbol}</Trans>\r\n        </ToggleElement>\r\n        <ToggleElement isActive={!isSorted} fontSize=\"12px\">\r\n          <Trans>{isSorted ? currencyB.symbol : currencyA.symbol}</Trans>\r\n        </ToggleElement>\r\n      </ToggleWrapper>\r\n    </div>\r\n  ) : null\r\n}\r\n","import { Trans } from '@lingui/macro'\r\nimport { AutoColumn } from 'components/Column'\r\nimport styled from 'styled-components'\r\nimport { ThemedText } from 'theme/components'\r\n\r\nconst TextWrapper = styled.div`\r\n  border: 1px solid ${({ theme }) => theme.neutral3};\r\n  padding: 16px 12px;\r\n  border-radius: 12px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nexport function V2Unsupported() {\r\n  return (\r\n    <AutoColumn gap=\"lg\" justify=\"center\">\r\n      <AutoColumn gap=\"md\" style={{ width: '100%' }}>\r\n        <TextWrapper>\r\n          <ThemedText.BodySecondary color=\"neutral2\" textAlign=\"center\">\r\n            <Trans>Uniswap V2 is not available on this network.</Trans>\r\n          </ThemedText.BodySecondary>\r\n        </TextWrapper>\r\n      </AutoColumn>\r\n    </AutoColumn>\r\n  )\r\n}\r\n","import { ApolloLink } from \"./ApolloLink.js\";\nexport var concat = ApolloLink.concat;\n//# sourceMappingURL=concat.js.map","import { ApolloClient, ApolloLink, concat, HttpLink, InMemoryCache, NormalizedCacheObject } from '@apollo/client'\r\nimport { ChainId } from '@uniswap/sdk-core'\r\n\r\nimport store from '../../state/index'\r\n\r\nconst CHAIN_SUBGRAPH_URL: Record<number, string> = {\r\n  [ChainId.MAINNET]: 'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3?source=uniswap',\r\n  [ChainId.ARBITRUM_ONE]: 'https://thegraph.com/hosted-service/subgraph/ianlapham/uniswap-arbitrum-one?source=uniswap',\r\n  [ChainId.OPTIMISM]: 'https://api.thegraph.com/subgraphs/name/ianlapham/optimism-post-regenesis?source=uniswap',\r\n  [ChainId.POLYGON]: 'https://api.thegraph.com/subgraphs/name/ianlapham/uniswap-v3-polygon?source=uniswap',\r\n  [ChainId.CELO]: 'https://api.thegraph.com/subgraphs/name/jesse-sawa/uniswap-celo?source=uniswap',\r\n  [ChainId.BNB]: 'https://api.thegraph.com/subgraphs/name/ianlapham/uniswap-v3-bsc?source=uniswap',\r\n  [ChainId.AVALANCHE]: 'https://api.thegraph.com/subgraphs/name/lynnshaoyu/uniswap-v3-avax?source=uniswap',\r\n  [ChainId.BASE]: 'https://api.studio.thegraph.com/query/48211/uniswap-v3-base/version/latest',\r\n}\r\n\r\nconst CHAIN_BLOCK_SUBGRAPH_URL: Record<number, string> = {\r\n  [ChainId.MAINNET]: 'https://api.thegraph.com/subgraphs/name/blocklytics/ethereum-blocks?source=uniswap',\r\n  [ChainId.ARBITRUM_ONE]: 'https://api.thegraph.com/subgraphs/name/ianlapham/arbitrum-one-blocks?source=uniswap',\r\n  [ChainId.OPTIMISM]: 'https://api.thegraph.com/subgraphs/name/ianlapham/uni-testing-subgraph?source=uniswap',\r\n  [ChainId.POLYGON]: 'https://api.thegraph.com/subgraphs/name/ianlapham/polygon-blocks?source=uniswap',\r\n  [ChainId.CELO]: 'https://api.thegraph.com/subgraphs/name/jesse-sawa/celo-blocks?source=uniswap',\r\n  [ChainId.BNB]: 'https://api.thegraph.com/subgraphs/name/wombat-exchange/bnb-chain-block?source=uniswap',\r\n  [ChainId.AVALANCHE]: 'https://api.thegraph.com/subgraphs/name/lynnshaoyu/avalanche-blocks?source=uniswap',\r\n  [ChainId.BASE]: 'https://api.studio.thegraph.com/query/48211/base-blocks/version/latest?source=uniswap',\r\n}\r\n\r\nconst httpLink = new HttpLink({ uri: CHAIN_SUBGRAPH_URL[ChainId.MAINNET] })\r\n\r\n// This middleware will allow us to dynamically update the uri for the requests based off chainId\r\n// For more information: https://www.apollographql.com/docs/react/networking/advanced-http-networking/\r\nconst authMiddleware = new ApolloLink((operation, forward) => {\r\n  // add the authorization to the headers\r\n  const chainId = store.getState().application.chainId\r\n\r\n  operation.setContext(() => ({\r\n    uri: chainId && CHAIN_SUBGRAPH_URL[chainId] ? CHAIN_SUBGRAPH_URL[chainId] : CHAIN_SUBGRAPH_URL[ChainId.MAINNET],\r\n  }))\r\n\r\n  return forward(operation)\r\n})\r\n\r\nexport const apolloClient = new ApolloClient({\r\n  cache: new InMemoryCache(),\r\n  link: concat(authMiddleware, httpLink),\r\n})\r\n\r\nexport const chainToApolloClient: Record<number, ApolloClient<NormalizedCacheObject>> = {\r\n  [ChainId.MAINNET]: new ApolloClient({\r\n    cache: new InMemoryCache(),\r\n    uri: CHAIN_SUBGRAPH_URL[ChainId.MAINNET],\r\n  }),\r\n  [ChainId.ARBITRUM_ONE]: new ApolloClient({\r\n    cache: new InMemoryCache(),\r\n    uri: CHAIN_SUBGRAPH_URL[ChainId.ARBITRUM_ONE],\r\n  }),\r\n  [ChainId.OPTIMISM]: new ApolloClient({\r\n    cache: new InMemoryCache(),\r\n    uri: CHAIN_SUBGRAPH_URL[ChainId.OPTIMISM],\r\n  }),\r\n  [ChainId.POLYGON]: new ApolloClient({\r\n    cache: new InMemoryCache(),\r\n    uri: CHAIN_SUBGRAPH_URL[ChainId.POLYGON],\r\n  }),\r\n  [ChainId.CELO]: new ApolloClient({\r\n    cache: new InMemoryCache(),\r\n    uri: CHAIN_SUBGRAPH_URL[ChainId.CELO],\r\n  }),\r\n  [ChainId.BNB]: new ApolloClient({\r\n    cache: new InMemoryCache(),\r\n    uri: CHAIN_SUBGRAPH_URL[ChainId.BNB],\r\n  }),\r\n  [ChainId.AVALANCHE]: new ApolloClient({\r\n    cache: new InMemoryCache(),\r\n    uri: CHAIN_SUBGRAPH_URL[ChainId.AVALANCHE],\r\n  }),\r\n}\r\n\r\nexport const chainToApolloBlockClient: Record<number, ApolloClient<NormalizedCacheObject>> = {\r\n  [ChainId.MAINNET]: new ApolloClient({\r\n    uri: CHAIN_BLOCK_SUBGRAPH_URL[ChainId.MAINNET],\r\n    cache: new InMemoryCache(),\r\n  }),\r\n  [ChainId.ARBITRUM_ONE]: new ApolloClient({\r\n    uri: CHAIN_BLOCK_SUBGRAPH_URL[ChainId.ARBITRUM_ONE],\r\n    cache: new InMemoryCache(),\r\n  }),\r\n  [ChainId.OPTIMISM]: new ApolloClient({\r\n    uri: CHAIN_BLOCK_SUBGRAPH_URL[ChainId.OPTIMISM],\r\n    cache: new InMemoryCache(),\r\n  }),\r\n  [ChainId.POLYGON]: new ApolloClient({\r\n    uri: CHAIN_BLOCK_SUBGRAPH_URL[ChainId.POLYGON],\r\n    cache: new InMemoryCache(),\r\n  }),\r\n  [ChainId.CELO]: new ApolloClient({\r\n    uri: CHAIN_BLOCK_SUBGRAPH_URL[ChainId.CELO],\r\n    cache: new InMemoryCache(),\r\n  }),\r\n  [ChainId.BNB]: new ApolloClient({\r\n    uri: CHAIN_BLOCK_SUBGRAPH_URL[ChainId.BNB],\r\n    cache: new InMemoryCache(),\r\n  }),\r\n  [ChainId.AVALANCHE]: new ApolloClient({\r\n    uri: CHAIN_BLOCK_SUBGRAPH_URL[ChainId.AVALANCHE],\r\n    cache: new InMemoryCache(),\r\n  }),\r\n}\r\n","import { useWeb3React } from '@web3-react/core'\r\nimport { SUPPORTED_V2POOL_CHAIN_IDS } from 'constants/chains'\r\n\r\nexport function useNetworkSupportsV2() {\r\n  const { chainId } = useWeb3React()\r\n  return chainId && SUPPORTED_V2POOL_CHAIN_IDS.includes(chainId)\r\n}\r\n","import { Interface } from '@ethersproject/abi'\r\nimport { BigintIsh, Currency, Token, V3_CORE_FACTORY_ADDRESSES } from '@uniswap/sdk-core'\r\nimport IUniswapV3PoolStateJSON from '@uniswap/v3-core/artifacts/contracts/interfaces/pool/IUniswapV3PoolState.sol/IUniswapV3PoolState.json'\r\nimport { computePoolAddress } from '@uniswap/v3-sdk'\r\nimport { FeeAmount, Pool } from '@uniswap/v3-sdk'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport JSBI from 'jsbi'\r\nimport { useMultipleContractSingleData } from 'lib/hooks/multicall'\r\nimport { useMemo } from 'react'\r\n\r\nimport { IUniswapV3PoolStateInterface } from '../types/v3/IUniswapV3PoolState'\r\n\r\nconst POOL_STATE_INTERFACE = new Interface(IUniswapV3PoolStateJSON.abi) as IUniswapV3PoolStateInterface\r\n\r\n// Classes are expensive to instantiate, so this caches the recently instantiated pools.\r\n// This avoids re-instantiating pools as the other pools in the same request are loaded.\r\nclass PoolCache {\r\n  // Evict after 128 entries. Empirically, a swap uses 64 entries.\r\n  private static MAX_ENTRIES = 128\r\n\r\n  // These are FIFOs, using unshift/pop. This makes recent entries faster to find.\r\n  private static pools: Pool[] = []\r\n  private static addresses: { key: string; address: string }[] = []\r\n\r\n  static getPoolAddress(factoryAddress: string, tokenA: Token, tokenB: Token, fee: FeeAmount): string {\r\n    if (this.addresses.length > this.MAX_ENTRIES) {\r\n      this.addresses = this.addresses.slice(0, this.MAX_ENTRIES / 2)\r\n    }\r\n\r\n    const { address: addressA } = tokenA\r\n    const { address: addressB } = tokenB\r\n    const key = `${factoryAddress}:${addressA}:${addressB}:${fee.toString()}`\r\n    const found = this.addresses.find((address) => address.key === key)\r\n    if (found) return found.address\r\n\r\n    const address = {\r\n      key,\r\n      address: computePoolAddress({\r\n        factoryAddress,\r\n        tokenA,\r\n        tokenB,\r\n        fee,\r\n      }),\r\n    }\r\n    this.addresses.unshift(address)\r\n    return address.address\r\n  }\r\n\r\n  static getPool(\r\n    tokenA: Token,\r\n    tokenB: Token,\r\n    fee: FeeAmount,\r\n    sqrtPriceX96: BigintIsh,\r\n    liquidity: BigintIsh,\r\n    tick: number\r\n  ): Pool {\r\n    if (this.pools.length > this.MAX_ENTRIES) {\r\n      this.pools = this.pools.slice(0, this.MAX_ENTRIES / 2)\r\n    }\r\n\r\n    const found = this.pools.find(\r\n      (pool) =>\r\n        pool.token0 === tokenA &&\r\n        pool.token1 === tokenB &&\r\n        pool.fee === fee &&\r\n        JSBI.EQ(pool.sqrtRatioX96, sqrtPriceX96) &&\r\n        JSBI.EQ(pool.liquidity, liquidity) &&\r\n        pool.tickCurrent === tick\r\n    )\r\n    if (found) return found\r\n\r\n    const pool = new Pool(tokenA, tokenB, fee, sqrtPriceX96, liquidity, tick)\r\n    this.pools.unshift(pool)\r\n    return pool\r\n  }\r\n}\r\n\r\nexport enum PoolState {\r\n  LOADING,\r\n  NOT_EXISTS,\r\n  EXISTS,\r\n  INVALID,\r\n}\r\n\r\nexport function usePools(\r\n  poolKeys: [Currency | undefined, Currency | undefined, FeeAmount | undefined][]\r\n): [PoolState, Pool | null][] {\r\n  const { chainId } = useWeb3React()\r\n\r\n  const poolTokens: ([Token, Token, FeeAmount] | undefined)[] = useMemo(() => {\r\n    if (!chainId) return new Array(poolKeys.length)\r\n\r\n    return poolKeys.map(([currencyA, currencyB, feeAmount]) => {\r\n      if (currencyA && currencyB && feeAmount) {\r\n        const tokenA = currencyA.wrapped\r\n        const tokenB = currencyB.wrapped\r\n        if (tokenA.equals(tokenB)) return undefined\r\n\r\n        return tokenA.sortsBefore(tokenB) ? [tokenA, tokenB, feeAmount] : [tokenB, tokenA, feeAmount]\r\n      }\r\n      return undefined\r\n    })\r\n  }, [chainId, poolKeys])\r\n\r\n  const poolAddresses: (string | undefined)[] = useMemo(() => {\r\n    const v3CoreFactoryAddress = chainId && V3_CORE_FACTORY_ADDRESSES[chainId]\r\n    if (!v3CoreFactoryAddress) return new Array(poolTokens.length)\r\n\r\n    return poolTokens.map((value) => value && PoolCache.getPoolAddress(v3CoreFactoryAddress, ...value))\r\n  }, [chainId, poolTokens])\r\n\r\n  const slot0s = useMultipleContractSingleData(poolAddresses, POOL_STATE_INTERFACE, 'slot0')\r\n  const liquidities = useMultipleContractSingleData(poolAddresses, POOL_STATE_INTERFACE, 'liquidity')\r\n\r\n  return useMemo(() => {\r\n    return poolKeys.map((_key, index) => {\r\n      const tokens = poolTokens[index]\r\n      if (!tokens) return [PoolState.INVALID, null]\r\n      const [token0, token1, fee] = tokens\r\n\r\n      if (!slot0s[index]) return [PoolState.INVALID, null]\r\n      const { result: slot0, loading: slot0Loading, valid: slot0Valid } = slot0s[index]\r\n\r\n      if (!liquidities[index]) return [PoolState.INVALID, null]\r\n      const { result: liquidity, loading: liquidityLoading, valid: liquidityValid } = liquidities[index]\r\n\r\n      if (!tokens || !slot0Valid || !liquidityValid) return [PoolState.INVALID, null]\r\n      if (slot0Loading || liquidityLoading) return [PoolState.LOADING, null]\r\n      if (!slot0 || !liquidity) return [PoolState.NOT_EXISTS, null]\r\n      if (!slot0.sqrtPriceX96 || slot0.sqrtPriceX96.eq(0)) return [PoolState.NOT_EXISTS, null]\r\n\r\n      try {\r\n        const pool = PoolCache.getPool(token0, token1, fee, slot0.sqrtPriceX96, liquidity[0], slot0.tick)\r\n        return [PoolState.EXISTS, pool]\r\n      } catch (error) {\r\n        console.error('Error when constructing the pool', error)\r\n        return [PoolState.NOT_EXISTS, null]\r\n      }\r\n    })\r\n  }, [liquidities, poolKeys, slot0s, poolTokens])\r\n}\r\n\r\nexport function usePool(\r\n  currencyA: Currency | undefined,\r\n  currencyB: Currency | undefined,\r\n  feeAmount: FeeAmount | undefined\r\n): [PoolState, Pool | null] {\r\n  const poolKeys: [Currency | undefined, Currency | undefined, FeeAmount | undefined][] = useMemo(\r\n    () => [[currencyA, currencyB, feeAmount]],\r\n    [currencyA, currencyB, feeAmount]\r\n  )\r\n\r\n  return usePools(poolKeys)[0]\r\n}\r\n","import { Currency, CurrencyAmount, Token } from '@uniswap/sdk-core'\r\nimport { useSingleCallResult } from 'lib/hooks/multicall'\r\nimport { useMemo } from 'react'\r\n\r\nimport { useTokenContract } from './useContract'\r\n\r\n// returns undefined if input token is undefined, or fails to get token contract,\r\n// or contract total supply cannot be fetched\r\nexport function useTotalSupply(token?: Currency): CurrencyAmount<Token> | undefined {\r\n  const contract = useTokenContract(token?.isToken ? token.address : undefined, false)\r\n\r\n  const totalSupplyStr: string | undefined = useSingleCallResult(contract, 'totalSupply')?.result?.[0]?.toString()\r\n\r\n  return useMemo(\r\n    () => (token?.isToken && totalSupplyStr ? CurrencyAmount.fromRawAmount(token, totalSupplyStr) : undefined),\r\n    [token, totalSupplyStr]\r\n  )\r\n}\r\n","import { BigNumber } from '@ethersproject/bignumber'\r\nimport { splitSignature } from '@ethersproject/bytes'\r\nimport { ChainId, Currency, CurrencyAmount } from '@uniswap/sdk-core'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport JSBI from 'jsbi'\r\nimport { useSingleCallResult } from 'lib/hooks/multicall'\r\nimport { useMemo, useState } from 'react'\r\n\r\nimport { DAI, UNI, USDC_MAINNET } from '../constants/tokens'\r\nimport { useEIP2612Contract } from './useContract'\r\nimport useIsArgentWallet from './useIsArgentWallet'\r\n\r\nexport enum PermitType {\r\n  AMOUNT = 1,\r\n  ALLOWED = 2,\r\n}\r\n\r\n// 20 minutes to submit after signing\r\nconst PERMIT_VALIDITY_BUFFER = 20 * 60\r\n\r\nexport interface PermitInfo {\r\n  type: PermitType\r\n  name: string\r\n  // version is optional, and if omitted, will not be included in the domain\r\n  version?: string\r\n}\r\n\r\n// todo: read this information from extensions on token lists or elsewhere (permit registry?)\r\nconst PERMITTABLE_TOKENS: {\r\n  [chainId: number]: {\r\n    [checksummedTokenAddress: string]: PermitInfo\r\n  }\r\n} = {\r\n  [ChainId.MAINNET]: {\r\n    [USDC_MAINNET.address]: { type: PermitType.AMOUNT, name: 'USD Coin', version: '2' },\r\n    [DAI.address]: { type: PermitType.ALLOWED, name: 'Dai Stablecoin', version: '1' },\r\n    [UNI[ChainId.MAINNET].address]: { type: PermitType.AMOUNT, name: 'Uniswap' },\r\n  },\r\n  [ChainId.GOERLI]: {\r\n    [UNI[ChainId.GOERLI].address]: { type: PermitType.AMOUNT, name: 'Uniswap' },\r\n  },\r\n  [ChainId.SEPOLIA]: {\r\n    [UNI[ChainId.SEPOLIA].address]: { type: PermitType.AMOUNT, name: 'Uniswap' },\r\n  },\r\n}\r\n\r\nenum UseERC20PermitState {\r\n  // returned for any reason, e.g. it is an argent wallet, or the currency does not support it\r\n  NOT_APPLICABLE,\r\n  LOADING,\r\n  NOT_SIGNED,\r\n  SIGNED,\r\n}\r\n\r\ninterface BaseSignatureData {\r\n  v: number\r\n  r: string\r\n  s: string\r\n  deadline: number\r\n  nonce: number\r\n  owner: string\r\n  spender: string\r\n  chainId: number\r\n  tokenAddress: string\r\n  permitType: PermitType\r\n}\r\n\r\ninterface StandardSignatureData extends BaseSignatureData {\r\n  amount: string\r\n}\r\n\r\ninterface AllowedSignatureData extends BaseSignatureData {\r\n  allowed: true\r\n}\r\n\r\ntype SignatureData = StandardSignatureData | AllowedSignatureData\r\n\r\nconst EIP712_DOMAIN_TYPE = [\r\n  { name: 'name', type: 'string' },\r\n  { name: 'version', type: 'string' },\r\n  { name: 'chainId', type: 'uint256' },\r\n  { name: 'verifyingContract', type: 'address' },\r\n]\r\n\r\nconst EIP712_DOMAIN_TYPE_NO_VERSION = [\r\n  { name: 'name', type: 'string' },\r\n  { name: 'chainId', type: 'uint256' },\r\n  { name: 'verifyingContract', type: 'address' },\r\n]\r\n\r\nconst EIP2612_TYPE = [\r\n  { name: 'owner', type: 'address' },\r\n  { name: 'spender', type: 'address' },\r\n  { name: 'value', type: 'uint256' },\r\n  { name: 'nonce', type: 'uint256' },\r\n  { name: 'deadline', type: 'uint256' },\r\n]\r\n\r\nconst PERMIT_ALLOWED_TYPE = [\r\n  { name: 'holder', type: 'address' },\r\n  { name: 'spender', type: 'address' },\r\n  { name: 'nonce', type: 'uint256' },\r\n  { name: 'expiry', type: 'uint256' },\r\n  { name: 'allowed', type: 'bool' },\r\n]\r\n\r\nexport function useERC20Permit(\r\n  currencyAmount: CurrencyAmount<Currency> | null | undefined,\r\n  spender: string | null | undefined,\r\n  transactionDeadline: BigNumber | undefined,\r\n  overridePermitInfo: PermitInfo | undefined | null\r\n): {\r\n  signatureData: SignatureData | null\r\n  state: UseERC20PermitState\r\n  gatherPermitSignature: null | (() => Promise<void>)\r\n} {\r\n  const { account, chainId, provider } = useWeb3React()\r\n  const tokenAddress = currencyAmount?.currency?.isToken ? currencyAmount.currency.address : undefined\r\n  const eip2612Contract = useEIP2612Contract(tokenAddress)\r\n  const isArgentWallet = useIsArgentWallet()\r\n  const nonceInputs = useMemo(() => [account ?? undefined], [account])\r\n  const tokenNonceState = useSingleCallResult(eip2612Contract, 'nonces', nonceInputs)\r\n  const permitInfo =\r\n    overridePermitInfo ?? (chainId && tokenAddress ? PERMITTABLE_TOKENS[chainId]?.[tokenAddress] : undefined)\r\n\r\n  const [signatureData, setSignatureData] = useState<SignatureData | null>(null)\r\n\r\n  return useMemo(() => {\r\n    if (\r\n      isArgentWallet ||\r\n      !currencyAmount ||\r\n      !eip2612Contract ||\r\n      !account ||\r\n      !chainId ||\r\n      !transactionDeadline ||\r\n      !provider ||\r\n      !tokenNonceState.valid ||\r\n      !tokenAddress ||\r\n      !spender ||\r\n      !permitInfo\r\n    ) {\r\n      return {\r\n        state: UseERC20PermitState.NOT_APPLICABLE,\r\n        signatureData: null,\r\n        gatherPermitSignature: null,\r\n      }\r\n    }\r\n\r\n    const nonceNumber = tokenNonceState.result?.[0]?.toNumber()\r\n    if (tokenNonceState.loading || typeof nonceNumber !== 'number') {\r\n      return {\r\n        state: UseERC20PermitState.LOADING,\r\n        signatureData: null,\r\n        gatherPermitSignature: null,\r\n      }\r\n    }\r\n\r\n    const isSignatureDataValid =\r\n      signatureData &&\r\n      signatureData.owner === account &&\r\n      signatureData.deadline >= transactionDeadline.toNumber() &&\r\n      signatureData.tokenAddress === tokenAddress &&\r\n      signatureData.nonce === nonceNumber &&\r\n      signatureData.spender === spender &&\r\n      ('allowed' in signatureData ||\r\n        JSBI.greaterThanOrEqual(JSBI.BigInt(signatureData.amount), currencyAmount.quotient))\r\n\r\n    return {\r\n      state: isSignatureDataValid ? UseERC20PermitState.SIGNED : UseERC20PermitState.NOT_SIGNED,\r\n      signatureData: isSignatureDataValid ? signatureData : null,\r\n      gatherPermitSignature: async function gatherPermitSignature() {\r\n        const allowed = permitInfo.type === PermitType.ALLOWED\r\n        const signatureDeadline = transactionDeadline.toNumber() + PERMIT_VALIDITY_BUFFER\r\n        const value = currencyAmount.quotient.toString()\r\n\r\n        const message = allowed\r\n          ? {\r\n              holder: account,\r\n              spender,\r\n              allowed,\r\n              nonce: nonceNumber,\r\n              expiry: signatureDeadline,\r\n            }\r\n          : {\r\n              owner: account,\r\n              spender,\r\n              value,\r\n              nonce: nonceNumber,\r\n              deadline: signatureDeadline,\r\n            }\r\n        const domain = permitInfo.version\r\n          ? {\r\n              name: permitInfo.name,\r\n              version: permitInfo.version,\r\n              verifyingContract: tokenAddress,\r\n              chainId,\r\n            }\r\n          : {\r\n              name: permitInfo.name,\r\n              verifyingContract: tokenAddress,\r\n              chainId,\r\n            }\r\n        const data = JSON.stringify({\r\n          types: {\r\n            EIP712Domain: permitInfo.version ? EIP712_DOMAIN_TYPE : EIP712_DOMAIN_TYPE_NO_VERSION,\r\n            Permit: allowed ? PERMIT_ALLOWED_TYPE : EIP2612_TYPE,\r\n          },\r\n          domain,\r\n          primaryType: 'Permit',\r\n          message,\r\n        })\r\n\r\n        return provider\r\n          .send('eth_signTypedData_v4', [account, data])\r\n          .then(splitSignature)\r\n          .then((signature) => {\r\n            setSignatureData({\r\n              v: signature.v,\r\n              r: signature.r,\r\n              s: signature.s,\r\n              deadline: signatureDeadline,\r\n              ...(allowed ? { allowed } : { amount: value }),\r\n              nonce: nonceNumber,\r\n              chainId,\r\n              owner: account,\r\n              spender,\r\n              tokenAddress,\r\n              permitType: permitInfo.type,\r\n            })\r\n          })\r\n      },\r\n    }\r\n  }, [\r\n    currencyAmount,\r\n    eip2612Contract,\r\n    account,\r\n    chainId,\r\n    isArgentWallet,\r\n    transactionDeadline,\r\n    provider,\r\n    tokenNonceState.loading,\r\n    tokenNonceState.valid,\r\n    tokenNonceState.result,\r\n    tokenAddress,\r\n    spender,\r\n    permitInfo,\r\n    signatureData,\r\n  ])\r\n}\r\n","import { CurrencyAmount, Token } from '@uniswap/sdk-core'\r\n\r\nimport { PermitInfo, PermitType, useERC20Permit } from './useERC20Permit'\r\nimport useTransactionDeadline from './useTransactionDeadline'\r\n\r\nconst REMOVE_V2_LIQUIDITY_PERMIT_INFO: PermitInfo = {\r\n  version: '1',\r\n  name: 'Uniswap V2',\r\n  type: PermitType.AMOUNT,\r\n}\r\n\r\nexport function useV2LiquidityTokenPermit(\r\n  liquidityAmount: CurrencyAmount<Token> | null | undefined,\r\n  spender: string | null | undefined\r\n) {\r\n  const transactionDeadline = useTransactionDeadline()\r\n  return useERC20Permit(liquidityAmount, spender, transactionDeadline, REMOVE_V2_LIQUIDITY_PERMIT_INFO)\r\n}\r\n","import { Contract } from '@ethersproject/contracts'\r\nimport type { TransactionResponse } from '@ethersproject/providers'\r\nimport { Trans } from '@lingui/macro'\r\nimport { LiquidityEventName, LiquiditySource } from '@uniswap/analytics-events'\r\nimport { CurrencyAmount, Fraction, Percent, Price, Token, V2_FACTORY_ADDRESSES } from '@uniswap/sdk-core'\r\nimport { FeeAmount, Pool, Position, priceToClosestTick, TickMath } from '@uniswap/v3-sdk'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { sendAnalyticsEvent, useTrace } from 'analytics'\r\nimport Badge, { BadgeVariant } from 'components/Badge'\r\nimport { ButtonConfirmed } from 'components/Button'\r\nimport { BlueCard, DarkGrayCard, LightCard, YellowCard } from 'components/Card'\r\nimport DoubleCurrencyLogo from 'components/DoubleLogo'\r\nimport FeeSelector from 'components/FeeSelector'\r\nimport RangeSelector from 'components/RangeSelector'\r\nimport RateToggle from 'components/RateToggle'\r\nimport SettingsTab from 'components/Settings'\r\nimport { Dots } from 'components/swap/styled'\r\nimport { V2Unsupported } from 'components/V2Unsupported'\r\nimport { ApprovalState, useApproveCallback } from 'hooks/useApproveCallback'\r\nimport useCurrentBlockTimestamp from 'hooks/useCurrentBlockTimestamp'\r\nimport { useNetworkSupportsV2 } from 'hooks/useNetworkSupportsV2'\r\nimport { PoolState, usePool } from 'hooks/usePools'\r\nimport useTransactionDeadline from 'hooks/useTransactionDeadline'\r\nimport { useV2LiquidityTokenPermit } from 'hooks/useV2LiquidityTokenPermit'\r\nimport JSBI from 'jsbi'\r\nimport { NEVER_RELOAD, useSingleCallResult } from 'lib/hooks/multicall'\r\nimport { ReactNode, useCallback, useEffect, useMemo, useState } from 'react'\r\nimport { AlertCircle, AlertTriangle, ArrowDown } from 'react-feather'\r\nimport { Navigate, useParams } from 'react-router-dom'\r\nimport { Text } from 'rebass'\r\nimport { useAppDispatch } from 'state/hooks'\r\nimport { Bound, resetMintState } from 'state/mint/v3/actions'\r\nimport { useRangeHopCallbacks, useV3DerivedMintInfo, useV3MintActionHandlers } from 'state/mint/v3/hooks'\r\nimport { useIsTransactionPending, useTransactionAdder } from 'state/transactions/hooks'\r\nimport { useUserSlippageToleranceWithDefault } from 'state/user/hooks'\r\nimport { useTheme } from 'styled-components'\r\nimport { formatCurrencyAmount } from 'utils/formatCurrencyAmount'\r\nimport { unwrappedToken } from 'utils/unwrappedToken'\r\n\r\nimport { AutoColumn } from '../../components/Column'\r\nimport FormattedCurrencyAmount from '../../components/FormattedCurrencyAmount'\r\nimport CurrencyLogo from '../../components/Logo/CurrencyLogo'\r\nimport { AutoRow, RowBetween, RowFixed } from '../../components/Row'\r\nimport { WRAPPED_NATIVE_CURRENCY } from '../../constants/tokens'\r\nimport { useToken } from '../../hooks/Tokens'\r\nimport { usePairContract, useV2MigratorContract } from '../../hooks/useContract'\r\nimport useIsArgentWallet from '../../hooks/useIsArgentWallet'\r\nimport { useTotalSupply } from '../../hooks/useTotalSupply'\r\nimport { useTokenBalance } from '../../state/connection/hooks'\r\nimport { TransactionType } from '../../state/transactions/types'\r\nimport { BackArrowLink, ExternalLink, ThemedText } from '../../theme/components'\r\nimport { isAddress } from '../../utils'\r\nimport { calculateGasMargin } from '../../utils/calculateGasMargin'\r\nimport { currencyId } from '../../utils/currencyId'\r\nimport { ExplorerDataType, getExplorerLink } from '../../utils/getExplorerLink'\r\nimport { BodyWrapper } from '../AppBody'\r\n\r\nconst ZERO = JSBI.BigInt(0)\r\n\r\nconst DEFAULT_MIGRATE_SLIPPAGE_TOLERANCE = new Percent(75, 10_000)\r\n\r\nfunction EmptyState({ message }: { message: ReactNode }) {\r\n  return (\r\n    <AutoColumn style={{ minHeight: 200, justifyContent: 'center', alignItems: 'center' }}>\r\n      <ThemedText.DeprecatedBody>{message}</ThemedText.DeprecatedBody>\r\n    </AutoColumn>\r\n  )\r\n}\r\n\r\nfunction LiquidityInfo({\r\n  token0Amount,\r\n  token1Amount,\r\n}: {\r\n  token0Amount: CurrencyAmount<Token>\r\n  token1Amount: CurrencyAmount<Token>\r\n}) {\r\n  const currency0 = unwrappedToken(token0Amount.currency)\r\n  const currency1 = unwrappedToken(token1Amount.currency)\r\n\r\n  return (\r\n    <AutoColumn gap=\"sm\">\r\n      <RowBetween>\r\n        <RowFixed>\r\n          <CurrencyLogo size=\"20px\" style={{ marginRight: '8px' }} currency={currency0} />\r\n          <Text fontSize={16} fontWeight={535}>\r\n            {currency0.symbol}\r\n          </Text>\r\n        </RowFixed>\r\n        <Text fontSize={16} fontWeight={535}>\r\n          <FormattedCurrencyAmount currencyAmount={token0Amount} />\r\n        </Text>\r\n      </RowBetween>\r\n      <RowBetween>\r\n        <RowFixed>\r\n          <CurrencyLogo size=\"20px\" style={{ marginRight: '8px' }} currency={currency1} />\r\n          <Text fontSize={16} fontWeight={535}>\r\n            {currency1.symbol}\r\n          </Text>\r\n        </RowFixed>\r\n\r\n        <Text fontSize={16} fontWeight={535}>\r\n          <FormattedCurrencyAmount currencyAmount={token1Amount} />\r\n        </Text>\r\n      </RowBetween>\r\n    </AutoColumn>\r\n  )\r\n}\r\n\r\n// hard-code this for now\r\nconst percentageToMigrate = 100\r\n\r\nfunction V2PairMigration({\r\n  pair,\r\n  pairBalance,\r\n  totalSupply,\r\n  reserve0,\r\n  reserve1,\r\n  token0,\r\n  token1,\r\n}: {\r\n  pair: Contract\r\n  pairBalance: CurrencyAmount<Token>\r\n  totalSupply: CurrencyAmount<Token>\r\n  reserve0: CurrencyAmount<Token>\r\n  reserve1: CurrencyAmount<Token>\r\n  token0: Token\r\n  token1: Token\r\n}) {\r\n  const { chainId, account } = useWeb3React()\r\n  const theme = useTheme()\r\n  const v2FactoryAddress = chainId ? V2_FACTORY_ADDRESSES[chainId] : undefined\r\n  const trace = useTrace()\r\n\r\n  const pairFactory = useSingleCallResult(pair, 'factory')\r\n  const isNotUniswap = pairFactory.result?.[0] && pairFactory.result[0] !== v2FactoryAddress\r\n\r\n  const deadline = useTransactionDeadline() // custom from users settings\r\n  const blockTimestamp = useCurrentBlockTimestamp()\r\n  const allowedSlippage = useUserSlippageToleranceWithDefault(DEFAULT_MIGRATE_SLIPPAGE_TOLERANCE) // custom from users\r\n\r\n  const currency0 = unwrappedToken(token0)\r\n  const currency1 = unwrappedToken(token1)\r\n\r\n  // this is just getLiquidityValue with the fee off, but for the passed pair\r\n  const token0Value = useMemo(\r\n    () =>\r\n      CurrencyAmount.fromRawAmount(\r\n        token0,\r\n        JSBI.divide(JSBI.multiply(pairBalance.quotient, reserve0.quotient), totalSupply.quotient)\r\n      ),\r\n    [token0, pairBalance, reserve0, totalSupply]\r\n  )\r\n  const token1Value = useMemo(\r\n    () =>\r\n      CurrencyAmount.fromRawAmount(\r\n        token1,\r\n        JSBI.divide(JSBI.multiply(pairBalance.quotient, reserve1.quotient), totalSupply.quotient)\r\n      ),\r\n    [token1, pairBalance, reserve1, totalSupply]\r\n  )\r\n\r\n  // set up v3 pool\r\n  const [feeAmount, setFeeAmount] = useState(FeeAmount.MEDIUM)\r\n  const [poolState, pool] = usePool(token0, token1, feeAmount)\r\n  const noLiquidity = poolState === PoolState.NOT_EXISTS\r\n\r\n  // get spot prices + price difference\r\n  const v2SpotPrice = useMemo(\r\n    () => new Price(token0, token1, reserve0.quotient, reserve1.quotient),\r\n    [token0, token1, reserve0, reserve1]\r\n  )\r\n  const v3SpotPrice = poolState === PoolState.EXISTS ? pool?.token0Price : undefined\r\n\r\n  let priceDifferenceFraction: Fraction | undefined =\r\n    v2SpotPrice && v3SpotPrice ? v3SpotPrice.divide(v2SpotPrice).subtract(1).multiply(100) : undefined\r\n  if (priceDifferenceFraction?.lessThan(ZERO)) {\r\n    priceDifferenceFraction = priceDifferenceFraction.multiply(-1)\r\n  }\r\n\r\n  const largePriceDifference = priceDifferenceFraction && !priceDifferenceFraction?.lessThan(JSBI.BigInt(2))\r\n\r\n  // the following is a small hack to get access to price range data/input handlers\r\n  const [baseToken, setBaseToken] = useState(token0)\r\n  const { ticks, pricesAtTicks, invertPrice, invalidRange, outOfRange, ticksAtLimit } = useV3DerivedMintInfo(\r\n    token0,\r\n    token1,\r\n    feeAmount,\r\n    baseToken\r\n  )\r\n\r\n  // get value and prices at ticks\r\n  const { [Bound.LOWER]: tickLower, [Bound.UPPER]: tickUpper } = ticks\r\n  const { [Bound.LOWER]: priceLower, [Bound.UPPER]: priceUpper } = pricesAtTicks\r\n\r\n  const { getDecrementLower, getIncrementLower, getDecrementUpper, getIncrementUpper } = useRangeHopCallbacks(\r\n    baseToken,\r\n    baseToken.equals(token0) ? token1 : token0,\r\n    feeAmount,\r\n    tickLower,\r\n    tickUpper\r\n  )\r\n\r\n  const { onLeftRangeInput, onRightRangeInput } = useV3MintActionHandlers(noLiquidity)\r\n\r\n  // the v3 tick is either the pool's tickCurrent, or the tick closest to the v2 spot price\r\n  const tick = pool?.tickCurrent ?? priceToClosestTick(v2SpotPrice)\r\n  // the price is either the current v3 price, or the price at the tick\r\n  const sqrtPrice = pool?.sqrtRatioX96 ?? TickMath.getSqrtRatioAtTick(tick)\r\n  const position =\r\n    typeof tickLower === 'number' && typeof tickUpper === 'number' && !invalidRange\r\n      ? Position.fromAmounts({\r\n          pool: pool ?? new Pool(token0, token1, feeAmount, sqrtPrice, 0, tick, []),\r\n          tickLower,\r\n          tickUpper,\r\n          amount0: token0Value.quotient,\r\n          amount1: token1Value.quotient,\r\n          useFullPrecision: true, // we want full precision for the theoretical position\r\n        })\r\n      : undefined\r\n\r\n  const { amount0: v3Amount0Min, amount1: v3Amount1Min } = useMemo(\r\n    () => (position ? position.mintAmountsWithSlippage(allowedSlippage) : { amount0: undefined, amount1: undefined }),\r\n    [position, allowedSlippage]\r\n  )\r\n\r\n  const refund0 = useMemo(\r\n    () =>\r\n      position && CurrencyAmount.fromRawAmount(token0, JSBI.subtract(token0Value.quotient, position.amount0.quotient)),\r\n    [token0Value, position, token0]\r\n  )\r\n  const refund1 = useMemo(\r\n    () =>\r\n      position && CurrencyAmount.fromRawAmount(token1, JSBI.subtract(token1Value.quotient, position.amount1.quotient)),\r\n    [token1Value, position, token1]\r\n  )\r\n\r\n  const [confirmingMigration, setConfirmingMigration] = useState<boolean>(false)\r\n  const [pendingMigrationHash, setPendingMigrationHash] = useState<string | null>(null)\r\n\r\n  const migrator = useV2MigratorContract()\r\n\r\n  // approvals\r\n  const [approval, approveManually] = useApproveCallback(pairBalance, migrator?.address)\r\n  const { signatureData, gatherPermitSignature } = useV2LiquidityTokenPermit(pairBalance, migrator?.address)\r\n\r\n  const isArgentWallet = useIsArgentWallet()\r\n\r\n  const approve = useCallback(async () => {\r\n    if (isNotUniswap || isArgentWallet) {\r\n      // sushi has to be manually approved\r\n      await approveManually()\r\n    } else if (gatherPermitSignature) {\r\n      try {\r\n        await gatherPermitSignature()\r\n      } catch (error) {\r\n        // try to approve if gatherPermitSignature failed for any reason other than the user rejecting it\r\n        if (error?.code !== 4001) {\r\n          await approveManually()\r\n        }\r\n      }\r\n    } else {\r\n      await approveManually()\r\n    }\r\n  }, [isNotUniswap, isArgentWallet, gatherPermitSignature, approveManually])\r\n\r\n  const addTransaction = useTransactionAdder()\r\n  const isMigrationPending = useIsTransactionPending(pendingMigrationHash ?? undefined)\r\n\r\n  const networkSupportsV2 = useNetworkSupportsV2()\r\n\r\n  const migrate = useCallback(() => {\r\n    if (\r\n      !migrator ||\r\n      !account ||\r\n      !deadline ||\r\n      !blockTimestamp ||\r\n      typeof tickLower !== 'number' ||\r\n      typeof tickUpper !== 'number' ||\r\n      !v3Amount0Min ||\r\n      !v3Amount1Min ||\r\n      !chainId ||\r\n      !networkSupportsV2\r\n    )\r\n      return\r\n\r\n    const deadlineToUse = signatureData?.deadline ?? deadline\r\n\r\n    const data: string[] = []\r\n\r\n    // permit if necessary\r\n    if (signatureData) {\r\n      data.push(\r\n        migrator.interface.encodeFunctionData('selfPermit', [\r\n          pair.address,\r\n          `0x${pairBalance.quotient.toString(16)}`,\r\n          deadlineToUse,\r\n          signatureData.v,\r\n          signatureData.r,\r\n          signatureData.s,\r\n        ])\r\n      )\r\n    }\r\n\r\n    // create/initialize pool if necessary\r\n    if (noLiquidity) {\r\n      data.push(\r\n        migrator.interface.encodeFunctionData('createAndInitializePoolIfNecessary', [\r\n          token0.address,\r\n          token1.address,\r\n          feeAmount,\r\n          `0x${sqrtPrice.toString(16)}`,\r\n        ])\r\n      )\r\n    }\r\n\r\n    // TODO could save gas by not doing this in multicall\r\n    data.push(\r\n      migrator.interface.encodeFunctionData('migrate', [\r\n        {\r\n          pair: pair.address,\r\n          liquidityToMigrate: `0x${pairBalance.quotient.toString(16)}`,\r\n          percentageToMigrate,\r\n          token0: token0.address,\r\n          token1: token1.address,\r\n          fee: feeAmount,\r\n          tickLower,\r\n          tickUpper,\r\n          amount0Min: `0x${v3Amount0Min.toString(16)}`,\r\n          amount1Min: `0x${v3Amount1Min.toString(16)}`,\r\n          recipient: account,\r\n          deadline: deadlineToUse,\r\n          refundAsETH: true, // hard-code this for now\r\n        },\r\n      ])\r\n    )\r\n\r\n    setConfirmingMigration(true)\r\n\r\n    migrator.estimateGas\r\n      .multicall(data)\r\n      .then((gasEstimate) => {\r\n        return migrator\r\n          .multicall(data, { gasLimit: calculateGasMargin(gasEstimate) })\r\n          .then((response: TransactionResponse) => {\r\n            sendAnalyticsEvent(LiquidityEventName.MIGRATE_LIQUIDITY_SUBMITTED, {\r\n              action: `${isNotUniswap ? LiquiditySource.SUSHISWAP : LiquiditySource.V2}->${LiquiditySource.V3}`,\r\n              label: `${currency0.symbol}/${currency1.symbol}`,\r\n              ...trace,\r\n            })\r\n\r\n            addTransaction(response, {\r\n              type: TransactionType.MIGRATE_LIQUIDITY_V3,\r\n              baseCurrencyId: currencyId(currency0),\r\n              quoteCurrencyId: currencyId(currency1),\r\n              isFork: isNotUniswap,\r\n            })\r\n            setPendingMigrationHash(response.hash)\r\n          })\r\n      })\r\n      .catch(() => {\r\n        setConfirmingMigration(false)\r\n      })\r\n  }, [\r\n    migrator,\r\n    account,\r\n    deadline,\r\n    blockTimestamp,\r\n    tickLower,\r\n    tickUpper,\r\n    v3Amount0Min,\r\n    v3Amount1Min,\r\n    chainId,\r\n    networkSupportsV2,\r\n    signatureData,\r\n    noLiquidity,\r\n    pair.address,\r\n    pairBalance.quotient,\r\n    token0.address,\r\n    token1.address,\r\n    feeAmount,\r\n    sqrtPrice,\r\n    isNotUniswap,\r\n    currency0,\r\n    currency1,\r\n    trace,\r\n    addTransaction,\r\n  ])\r\n\r\n  const isSuccessfullyMigrated = !!pendingMigrationHash && JSBI.equal(pairBalance.quotient, ZERO)\r\n\r\n  if (!networkSupportsV2) return <V2Unsupported />\r\n\r\n  return (\r\n    <AutoColumn gap=\"20px\">\r\n      <ThemedText.DeprecatedBody my={9} style={{ fontWeight: 485 }}>\r\n        <Trans>\r\n          This tool will safely migrate your {isNotUniswap ? 'SushiSwap' : 'V2'} liquidity to V3. The process is\r\n          completely trustless thanks to the{' '}\r\n        </Trans>\r\n        {chainId && migrator && (\r\n          <ExternalLink href={getExplorerLink(chainId, migrator.address, ExplorerDataType.ADDRESS)}>\r\n            <ThemedText.DeprecatedBlue display=\"inline\">\r\n              <Trans>Uniswap migration contract</Trans> ↗\r\n            </ThemedText.DeprecatedBlue>\r\n          </ExternalLink>\r\n        )}\r\n        .\r\n      </ThemedText.DeprecatedBody>\r\n\r\n      <LightCard>\r\n        <AutoColumn gap=\"lg\">\r\n          <RowBetween>\r\n            <RowFixed style={{ marginLeft: '8px' }}>\r\n              <DoubleCurrencyLogo currency0={currency0} currency1={currency1} margin={false} size={20} />\r\n              <ThemedText.DeprecatedMediumHeader style={{ marginLeft: '8px' }}>\r\n                <Trans>\r\n                  {currency0.symbol}/{currency1.symbol} LP Tokens\r\n                </Trans>\r\n              </ThemedText.DeprecatedMediumHeader>\r\n            </RowFixed>\r\n            <Badge variant={BadgeVariant.WARNING}>{isNotUniswap ? 'Sushi' : 'V2'}</Badge>\r\n          </RowBetween>\r\n          <LiquidityInfo token0Amount={token0Value} token1Amount={token1Value} />\r\n        </AutoColumn>\r\n      </LightCard>\r\n\r\n      <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n        <ArrowDown size={24} />\r\n      </div>\r\n\r\n      <LightCard>\r\n        <AutoColumn gap=\"lg\">\r\n          <RowBetween>\r\n            <RowFixed style={{ marginLeft: '8px' }}>\r\n              <DoubleCurrencyLogo currency0={currency0} currency1={currency1} margin={false} size={20} />\r\n              <ThemedText.DeprecatedMediumHeader style={{ marginLeft: '8px' }}>\r\n                <Trans>\r\n                  {currency0.symbol}/{currency1.symbol} LP NFT\r\n                </Trans>\r\n              </ThemedText.DeprecatedMediumHeader>\r\n            </RowFixed>\r\n            <Badge variant={BadgeVariant.PRIMARY}>V3</Badge>\r\n          </RowBetween>\r\n\r\n          <FeeSelector feeAmount={feeAmount} handleFeePoolSelect={setFeeAmount} />\r\n          {noLiquidity && (\r\n            <BlueCard style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n              <AlertCircle color={theme.neutral1} style={{ marginBottom: '12px', opacity: 0.8 }} />\r\n              <ThemedText.DeprecatedBody\r\n                fontSize={14}\r\n                style={{ marginBottom: 8, fontWeight: 535, opacity: 0.8 }}\r\n                textAlign=\"center\"\r\n              >\r\n                <Trans>\r\n                  You are the first liquidity provider for this Uniswap V3 pool. Your liquidity will migrate at the\r\n                  current {isNotUniswap ? 'SushiSwap' : 'V2'} price.\r\n                </Trans>\r\n              </ThemedText.DeprecatedBody>\r\n\r\n              <ThemedText.DeprecatedBody\r\n                fontWeight={535}\r\n                textAlign=\"center\"\r\n                fontSize={14}\r\n                style={{ marginTop: '8px', opacity: 0.8 }}\r\n              >\r\n                <Trans>Your transaction cost will be much higher as it includes the gas to create the pool.</Trans>\r\n              </ThemedText.DeprecatedBody>\r\n\r\n              {v2SpotPrice && (\r\n                <AutoColumn gap=\"sm\" style={{ marginTop: '12px' }}>\r\n                  <RowBetween>\r\n                    <ThemedText.DeprecatedBody fontWeight={535} fontSize={14}>\r\n                      <Trans>\r\n                        {isNotUniswap ? 'SushiSwap' : 'V2'} {invertPrice ? currency1.symbol : currency0.symbol} Price:\r\n                      </Trans>{' '}\r\n                      {invertPrice\r\n                        ? `${v2SpotPrice?.invert()?.toSignificant(6)} ${currency0.symbol}`\r\n                        : `${v2SpotPrice?.toSignificant(6)} ${currency1.symbol}`}\r\n                    </ThemedText.DeprecatedBody>\r\n                  </RowBetween>\r\n                </AutoColumn>\r\n              )}\r\n            </BlueCard>\r\n          )}\r\n\r\n          {largePriceDifference ? (\r\n            <YellowCard>\r\n              <AutoColumn gap=\"sm\">\r\n                <RowBetween>\r\n                  <ThemedText.DeprecatedBody fontSize={14}>\r\n                    <Trans>\r\n                      {isNotUniswap ? 'SushiSwap' : 'V2'} {invertPrice ? currency1.symbol : currency0.symbol} Price:\r\n                    </Trans>\r\n                  </ThemedText.DeprecatedBody>\r\n                  <ThemedText.DeprecatedBlack fontSize={14}>\r\n                    {invertPrice\r\n                      ? `${v2SpotPrice?.invert()?.toSignificant(6)} ${currency0.symbol}`\r\n                      : `${v2SpotPrice?.toSignificant(6)} ${currency1.symbol}`}\r\n                  </ThemedText.DeprecatedBlack>\r\n                </RowBetween>\r\n\r\n                <RowBetween>\r\n                  <ThemedText.DeprecatedBody fontSize={14}>\r\n                    <Trans>V3 {invertPrice ? currency1.symbol : currency0.symbol} Price:</Trans>\r\n                  </ThemedText.DeprecatedBody>\r\n                  <ThemedText.DeprecatedBlack fontSize={14}>\r\n                    {invertPrice\r\n                      ? `${v3SpotPrice?.invert()?.toSignificant(6)} ${currency0.symbol}`\r\n                      : `${v3SpotPrice?.toSignificant(6)} ${currency1.symbol}`}\r\n                  </ThemedText.DeprecatedBlack>\r\n                </RowBetween>\r\n\r\n                <RowBetween>\r\n                  <ThemedText.DeprecatedBody fontSize={14} color=\"inherit\">\r\n                    <Trans>Price difference:</Trans>\r\n                  </ThemedText.DeprecatedBody>\r\n                  <ThemedText.DeprecatedBlack fontSize={14} color=\"inherit\">\r\n                    <Trans>{priceDifferenceFraction?.toSignificant(4)}%</Trans>\r\n                  </ThemedText.DeprecatedBlack>\r\n                </RowBetween>\r\n              </AutoColumn>\r\n              <ThemedText.DeprecatedBody fontSize={14} style={{ marginTop: 8, fontWeight: 485 }}>\r\n                <Trans>\r\n                  You should only deposit liquidity into Uniswap V3 at a price you believe is correct. <br />\r\n                  If the price seems incorrect, you can either make a swap to move the price or wait for someone else to\r\n                  do so.\r\n                </Trans>\r\n              </ThemedText.DeprecatedBody>\r\n            </YellowCard>\r\n          ) : !noLiquidity && v3SpotPrice ? (\r\n            <RowBetween>\r\n              <ThemedText.DeprecatedBody fontSize={14}>\r\n                <Trans>V3 {invertPrice ? currency1.symbol : currency0.symbol} Price:</Trans>\r\n              </ThemedText.DeprecatedBody>\r\n              <ThemedText.DeprecatedBlack fontSize={14}>\r\n                {invertPrice\r\n                  ? `${v3SpotPrice?.invert()?.toSignificant(6)} ${currency0.symbol}`\r\n                  : `${v3SpotPrice?.toSignificant(6)} ${currency1.symbol}`}\r\n              </ThemedText.DeprecatedBlack>\r\n            </RowBetween>\r\n          ) : null}\r\n\r\n          <RowBetween>\r\n            <ThemedText.DeprecatedLabel>\r\n              <Trans>Set price range</Trans>\r\n            </ThemedText.DeprecatedLabel>\r\n            <RateToggle\r\n              currencyA={invertPrice ? currency1 : currency0}\r\n              currencyB={invertPrice ? currency0 : currency1}\r\n              handleRateToggle={() => {\r\n                onLeftRangeInput('')\r\n                onRightRangeInput('')\r\n                setBaseToken((base) => (base.equals(token0) ? token1 : token0))\r\n              }}\r\n            />\r\n          </RowBetween>\r\n\r\n          <RangeSelector\r\n            priceLower={priceLower}\r\n            priceUpper={priceUpper}\r\n            getDecrementLower={getDecrementLower}\r\n            getIncrementLower={getIncrementLower}\r\n            getDecrementUpper={getDecrementUpper}\r\n            getIncrementUpper={getIncrementUpper}\r\n            onLeftRangeInput={onLeftRangeInput}\r\n            onRightRangeInput={onRightRangeInput}\r\n            currencyA={invertPrice ? currency1 : currency0}\r\n            currencyB={invertPrice ? currency0 : currency1}\r\n            feeAmount={feeAmount}\r\n            ticksAtLimit={ticksAtLimit}\r\n          />\r\n\r\n          {outOfRange ? (\r\n            <YellowCard padding=\"8px 12px\" $borderRadius=\"12px\">\r\n              <RowBetween>\r\n                <AlertTriangle stroke={theme.deprecated_yellow3} size=\"16px\" />\r\n                <ThemedText.DeprecatedYellow ml=\"12px\" fontSize=\"12px\">\r\n                  <Trans>\r\n                    Your position will not earn fees or be used in trades until the market price moves into your range.\r\n                  </Trans>\r\n                </ThemedText.DeprecatedYellow>\r\n              </RowBetween>\r\n            </YellowCard>\r\n          ) : null}\r\n\r\n          {invalidRange ? (\r\n            <YellowCard padding=\"8px 12px\" $borderRadius=\"12px\">\r\n              <RowBetween>\r\n                <AlertTriangle stroke={theme.deprecated_yellow3} size=\"16px\" />\r\n                <ThemedText.DeprecatedYellow ml=\"12px\" fontSize=\"12px\">\r\n                  <Trans>Invalid range selected. The min price must be lower than the max price.</Trans>\r\n                </ThemedText.DeprecatedYellow>\r\n              </RowBetween>\r\n            </YellowCard>\r\n          ) : null}\r\n\r\n          {position ? (\r\n            <DarkGrayCard>\r\n              <AutoColumn gap=\"md\">\r\n                <LiquidityInfo token0Amount={position.amount0} token1Amount={position.amount1} />\r\n                {chainId && refund0 && refund1 ? (\r\n                  <ThemedText.DeprecatedBlack fontSize={12}>\r\n                    <Trans>\r\n                      At least {formatCurrencyAmount(refund0, 4)}{' '}\r\n                      {chainId && WRAPPED_NATIVE_CURRENCY[chainId]?.equals(token0) ? 'ETH' : token0.symbol} and{' '}\r\n                      {formatCurrencyAmount(refund1, 4)}{' '}\r\n                      {chainId && WRAPPED_NATIVE_CURRENCY[chainId]?.equals(token1) ? 'ETH' : token1.symbol} will be\r\n                      refunded to your wallet due to selected price range.\r\n                    </Trans>\r\n                  </ThemedText.DeprecatedBlack>\r\n                ) : null}\r\n              </AutoColumn>\r\n            </DarkGrayCard>\r\n          ) : null}\r\n\r\n          <AutoColumn gap=\"md\">\r\n            {!isSuccessfullyMigrated && !isMigrationPending ? (\r\n              <AutoColumn gap=\"md\" style={{ flex: '1' }}>\r\n                <ButtonConfirmed\r\n                  confirmed={approval === ApprovalState.APPROVED || signatureData !== null}\r\n                  disabled={\r\n                    approval !== ApprovalState.NOT_APPROVED ||\r\n                    signatureData !== null ||\r\n                    !v3Amount0Min ||\r\n                    !v3Amount1Min ||\r\n                    invalidRange ||\r\n                    confirmingMigration\r\n                  }\r\n                  onClick={approve}\r\n                >\r\n                  {approval === ApprovalState.PENDING ? (\r\n                    <Dots>\r\n                      <Trans>Approving</Trans>\r\n                    </Dots>\r\n                  ) : approval === ApprovalState.APPROVED || signatureData !== null ? (\r\n                    <Trans>Allowed</Trans>\r\n                  ) : (\r\n                    <Trans>Allow LP token migration</Trans>\r\n                  )}\r\n                </ButtonConfirmed>\r\n              </AutoColumn>\r\n            ) : null}\r\n            <AutoColumn gap=\"md\" style={{ flex: '1' }}>\r\n              <ButtonConfirmed\r\n                confirmed={isSuccessfullyMigrated}\r\n                disabled={\r\n                  !v3Amount0Min ||\r\n                  !v3Amount1Min ||\r\n                  invalidRange ||\r\n                  (approval !== ApprovalState.APPROVED && signatureData === null) ||\r\n                  confirmingMigration ||\r\n                  isMigrationPending ||\r\n                  isSuccessfullyMigrated\r\n                }\r\n                onClick={migrate}\r\n              >\r\n                {isSuccessfullyMigrated ? (\r\n                  'Success!'\r\n                ) : isMigrationPending ? (\r\n                  <Dots>\r\n                    <Trans>Migrating</Trans>\r\n                  </Dots>\r\n                ) : (\r\n                  <Trans>Migrate</Trans>\r\n                )}\r\n              </ButtonConfirmed>\r\n            </AutoColumn>\r\n          </AutoColumn>\r\n        </AutoColumn>\r\n      </LightCard>\r\n    </AutoColumn>\r\n  )\r\n}\r\n\r\nexport default function MigrateV2Pair() {\r\n  const { address } = useParams<{ address: string }>()\r\n  // reset mint state on component mount, and as a cleanup (on unmount)\r\n  const dispatch = useAppDispatch()\r\n  useEffect(() => {\r\n    dispatch(resetMintState())\r\n    return () => {\r\n      dispatch(resetMintState())\r\n    }\r\n  }, [dispatch])\r\n\r\n  const { chainId, account } = useWeb3React()\r\n\r\n  // get pair contract\r\n  const validatedAddress = isAddress(address)\r\n  const pair = usePairContract(validatedAddress ? validatedAddress : undefined)\r\n\r\n  // get token addresses from pair contract\r\n  const token0AddressCallState = useSingleCallResult(pair, 'token0', undefined, NEVER_RELOAD)\r\n  const token0Address = token0AddressCallState?.result?.[0]\r\n  const token1Address = useSingleCallResult(pair, 'token1', undefined, NEVER_RELOAD)?.result?.[0]\r\n\r\n  // get tokens\r\n  const token0 = useToken(token0Address)\r\n  const token1 = useToken(token1Address)\r\n\r\n  // get liquidity token balance\r\n  const liquidityToken: Token | undefined = useMemo(\r\n    () => (chainId && validatedAddress ? new Token(chainId, validatedAddress, 18) : undefined),\r\n    [chainId, validatedAddress]\r\n  )\r\n\r\n  // get data required for V2 pair migration\r\n  const pairBalance = useTokenBalance(account ?? undefined, liquidityToken)\r\n  const totalSupply = useTotalSupply(liquidityToken)\r\n  const [reserve0Raw, reserve1Raw] = useSingleCallResult(pair, 'getReserves')?.result ?? []\r\n  const reserve0 = useMemo(\r\n    () => (token0 && reserve0Raw ? CurrencyAmount.fromRawAmount(token0, reserve0Raw) : undefined),\r\n    [token0, reserve0Raw]\r\n  )\r\n  const reserve1 = useMemo(\r\n    () => (token1 && reserve1Raw ? CurrencyAmount.fromRawAmount(token1, reserve1Raw) : undefined),\r\n    [token1, reserve1Raw]\r\n  )\r\n\r\n  // redirect for invalid url params\r\n  if (\r\n    !validatedAddress ||\r\n    !pair ||\r\n    (pair &&\r\n      token0AddressCallState?.valid &&\r\n      !token0AddressCallState?.loading &&\r\n      !token0AddressCallState?.error &&\r\n      !token0Address)\r\n  ) {\r\n    console.error('Invalid pair address')\r\n    return <Navigate to=\"/migrate/v2\" replace />\r\n  }\r\n\r\n  return (\r\n    <BodyWrapper style={{ padding: 24 }}>\r\n      <AutoColumn gap=\"16px\">\r\n        <AutoRow style={{ alignItems: 'center', justifyContent: 'space-between' }} gap=\"8px\">\r\n          <BackArrowLink to=\"/migrate/v2\" />\r\n          <ThemedText.DeprecatedMediumHeader>\r\n            <Trans>Migrate V2 liquidity</Trans>\r\n          </ThemedText.DeprecatedMediumHeader>\r\n          <SettingsTab autoSlippage={DEFAULT_MIGRATE_SLIPPAGE_TOLERANCE} chainId={chainId} hideRoutingSettings />\r\n        </AutoRow>\r\n\r\n        {!account ? (\r\n          <ThemedText.DeprecatedLargeHeader>\r\n            <Trans>You must connect an account.</Trans>\r\n          </ThemedText.DeprecatedLargeHeader>\r\n        ) : pairBalance && totalSupply && reserve0 && reserve1 && token0 && token1 ? (\r\n          <V2PairMigration\r\n            pair={pair}\r\n            pairBalance={pairBalance}\r\n            totalSupply={totalSupply}\r\n            reserve0={reserve0}\r\n            reserve1={reserve1}\r\n            token0={token0}\r\n            token1={token1}\r\n          />\r\n        ) : (\r\n          <EmptyState message={<Trans>Loading</Trans>} />\r\n        )}\r\n      </AutoColumn>\r\n    </BodyWrapper>\r\n  )\r\n}\r\n","import { Currency, CurrencyAmount, Price } from '@uniswap/sdk-core'\r\nimport { DEFAULT_LOCALE, SUPPORTED_LOCALES } from 'constants/locales'\r\n\r\ninterface FormatLocaleNumberArgs {\r\n  number: CurrencyAmount<Currency> | Price<Currency, Currency> | number\r\n  locale?: string | null\r\n  options?: Intl.NumberFormatOptions\r\n  sigFigs?: number\r\n  fixedDecimals?: number\r\n}\r\n\r\nexport default function formatLocaleNumber({\r\n  number,\r\n  locale,\r\n  sigFigs,\r\n  fixedDecimals,\r\n  options = {},\r\n}: FormatLocaleNumberArgs): string {\r\n  let localeArg: string | string[]\r\n  if (!locale || (locale && !SUPPORTED_LOCALES.includes(locale))) {\r\n    localeArg = DEFAULT_LOCALE\r\n  } else {\r\n    localeArg = [locale, DEFAULT_LOCALE]\r\n  }\r\n  options.minimumFractionDigits = options.minimumFractionDigits || fixedDecimals\r\n  options.maximumFractionDigits = options.maximumFractionDigits || fixedDecimals\r\n\r\n  // Fixed decimals should override significant figures.\r\n  options.maximumSignificantDigits = options.maximumSignificantDigits || fixedDecimals ? undefined : sigFigs\r\n\r\n  let numberString: number\r\n  if (typeof number === 'number') {\r\n    numberString = fixedDecimals ? parseFloat(number.toFixed(fixedDecimals)) : number\r\n  } else {\r\n    const baseString = parseFloat(number.toSignificant(sigFigs))\r\n    numberString = fixedDecimals ? parseFloat(baseString.toFixed(fixedDecimals)) : baseString\r\n  }\r\n\r\n  return numberString.toLocaleString(localeArg, options)\r\n}\r\n","import { Currency, CurrencyAmount, Fraction } from '@uniswap/sdk-core'\r\nimport { DEFAULT_LOCALE, SupportedLocale } from 'constants/locales'\r\nimport JSBI from 'jsbi'\r\nimport formatLocaleNumber from 'lib/utils/formatLocaleNumber'\r\n\r\nexport function formatCurrencyAmount(\r\n  amount: CurrencyAmount<Currency> | undefined,\r\n  sigFigs: number,\r\n  locale: SupportedLocale = DEFAULT_LOCALE,\r\n  fixedDecimals?: number\r\n): string {\r\n  if (!amount) {\r\n    return '-'\r\n  }\r\n\r\n  if (JSBI.equal(amount.quotient, JSBI.BigInt(0))) {\r\n    return '0'\r\n  }\r\n\r\n  if (amount.divide(amount.decimalScale).lessThan(new Fraction(1, 100000))) {\r\n    return `<${formatLocaleNumber({ number: 0.00001, locale })}`\r\n  }\r\n\r\n  return formatLocaleNumber({ number: amount, locale, sigFigs, fixedDecimals })\r\n}\r\n","import { Currency } from '@uniswap/sdk-core'\r\nimport { asSupportedChain } from 'constants/chains'\r\n\r\nimport { nativeOnChain, WRAPPED_NATIVE_CURRENCY } from '../constants/tokens'\r\n\r\nexport function unwrappedToken(currency: Currency): Currency {\r\n  if (currency.isNative) return currency\r\n  const formattedChainId = asSupportedChain(currency.chainId)\r\n  if (formattedChainId && WRAPPED_NATIVE_CURRENCY[formattedChainId]?.equals(currency))\r\n    return nativeOnChain(currency.chainId)\r\n  return currency\r\n}\r\n"],"names":["CURRENCY_AMOUNT_MIN","Fraction","JSBI","FormattedCurrencyAmount","currencyAmount","significantDigits","equalTo","greaterThan","toSignificant","ToggleWrapper","styled","button","width","theme","surface2","surface3","ToggleElement","span","isActive","surface1","neutral1","neutral3","fontSize","neutral2","RateToggle","currencyA","currencyB","handleRateToggle","tokenA","wrapped","tokenB","isSorted","sortsBefore","div","style","display","alignItems","onClick","symbol","TextWrapper","V2Unsupported","AutoColumn","gap","justify","ThemedText","BodySecondary","color","textAlign","CHAIN_SUBGRAPH_URL","ChainId","MAINNET","ARBITRUM_ONE","OPTIMISM","POLYGON","CELO","BNB","AVALANCHE","BASE","CHAIN_BLOCK_SUBGRAPH_URL","httpLink","HttpLink","uri","authMiddleware","ApolloLink","operation","forward","chainId","store","getState","application","setContext","apolloClient","ApolloClient","cache","InMemoryCache","link","concat","chainToApolloClient","chainToApolloBlockClient","useNetworkSupportsV2","useWeb3React","SUPPORTED_V2POOL_CHAIN_IDS","includes","POOL_STATE_INTERFACE","Interface","IUniswapV3PoolStateJSON","getPoolAddress","factoryAddress","fee","this","addresses","length","MAX_ENTRIES","slice","address","addressA","addressB","key","toString","found","find","computePoolAddress","unshift","getPool","sqrtPriceX96","liquidity","tick","pools","pool","token0","token1","sqrtRatioX96","tickCurrent","Pool","usePools","poolKeys","poolTokens","useMemo","map","feeAmount","equals","Array","poolAddresses","v3CoreFactoryAddress","V3_CORE_FACTORY_ADDRESSES","value","PoolCache","slot0s","useMultipleContractSingleData","liquidities","_key","index","tokens","PoolState","INVALID","result","slot0","loading","slot0Loading","valid","slot0Valid","liquidityLoading","liquidityValid","LOADING","NOT_EXISTS","eq","EXISTS","error","console","usePool","useTotalSupply","token","contract","useTokenContract","isToken","undefined","totalSupplyStr","useSingleCallResult","CurrencyAmount","fromRawAmount","PermitType","AMOUNT","ALLOWED","PERMIT_VALIDITY_BUFFER","PERMITTABLE_TOKENS","USDC_MAINNET","type","name","version","DAI","UNI","GOERLI","SEPOLIA","UseERC20PermitState","NOT_APPLICABLE","NOT_SIGNED","SIGNED","EIP712_DOMAIN_TYPE","EIP712_DOMAIN_TYPE_NO_VERSION","EIP2612_TYPE","PERMIT_ALLOWED_TYPE","REMOVE_V2_LIQUIDITY_PERMIT_INFO","useV2LiquidityTokenPermit","liquidityAmount","spender","transactionDeadline","overridePermitInfo","account","provider","tokenAddress","currency","eip2612Contract","useEIP2612Contract","isArgentWallet","useIsArgentWallet","nonceInputs","tokenNonceState","permitInfo","signatureData","setSignatureData","useState","state","gatherPermitSignature","nonceNumber","toNumber","isSignatureDataValid","owner","deadline","nonce","amount","quotient","async","allowed","signatureDeadline","message","holder","expiry","domain","verifyingContract","data","JSON","stringify","types","EIP712Domain","Permit","primaryType","send","then","splitSignature","signature","v","r","s","permitType","useERC20Permit","useTransactionDeadline","ZERO","DEFAULT_MIGRATE_SLIPPAGE_TOLERANCE","Percent","EmptyState","minHeight","justifyContent","DeprecatedBody","LiquidityInfo","token0Amount","token1Amount","currency0","unwrappedToken","currency1","RowBetween","RowFixed","CurrencyLogo","size","marginRight","Text","fontWeight","percentageToMigrate","V2PairMigration","pair","pairBalance","totalSupply","reserve0","reserve1","useTheme","v2FactoryAddress","V2_FACTORY_ADDRESSES","trace","useTrace","pairFactory","isNotUniswap","blockTimestamp","useCurrentBlockTimestamp","allowedSlippage","useUserSlippageToleranceWithDefault","token0Value","token1Value","setFeeAmount","FeeAmount","MEDIUM","poolState","noLiquidity","v2SpotPrice","Price","v3SpotPrice","token0Price","priceDifferenceFraction","divide","subtract","multiply","lessThan","largePriceDifference","baseToken","setBaseToken","ticks","pricesAtTicks","invertPrice","invalidRange","outOfRange","ticksAtLimit","useV3DerivedMintInfo","Bound","LOWER","tickLower","UPPER","tickUpper","priceLower","priceUpper","getDecrementLower","getIncrementLower","getDecrementUpper","getIncrementUpper","useRangeHopCallbacks","onLeftRangeInput","onRightRangeInput","useV3MintActionHandlers","priceToClosestTick","sqrtPrice","TickMath","getSqrtRatioAtTick","position","Position","fromAmounts","amount0","amount1","useFullPrecision","v3Amount0Min","v3Amount1Min","mintAmountsWithSlippage","refund0","refund1","confirmingMigration","setConfirmingMigration","pendingMigrationHash","setPendingMigrationHash","migrator","useV2MigratorContract","approval","approveManually","useApproveCallback","approve","useCallback","code","addTransaction","useTransactionAdder","isMigrationPending","useIsTransactionPending","networkSupportsV2","migrate","deadlineToUse","push","interface","encodeFunctionData","liquidityToMigrate","amount0Min","amount1Min","recipient","refundAsETH","estimateGas","multicall","gasEstimate","gasLimit","calculateGasMargin","response","sendAnalyticsEvent","LiquidityEventName","MIGRATE_LIQUIDITY_SUBMITTED","action","LiquiditySource","SUSHISWAP","V2","V3","label","TransactionType","MIGRATE_LIQUIDITY_V3","baseCurrencyId","currencyId","quoteCurrencyId","isFork","hash","catch","isSuccessfullyMigrated","my","ExternalLink","href","getExplorerLink","ExplorerDataType","ADDRESS","DeprecatedBlue","LightCard","marginLeft","DoubleCurrencyLogo","margin","DeprecatedMediumHeader","Badge","variant","BadgeVariant","WARNING","ArrowDown","PRIMARY","FeeSelector","handleFeePoolSelect","BlueCard","flexDirection","AlertCircle","marginBottom","opacity","marginTop","invert","YellowCard","DeprecatedBlack","br","DeprecatedLabel","base","RangeSelector","padding","$borderRadius","AlertTriangle","stroke","deprecated_yellow3","DeprecatedYellow","ml","DarkGrayCard","formatCurrencyAmount","WRAPPED_NATIVE_CURRENCY","flex","ButtonConfirmed","confirmed","ApprovalState","APPROVED","disabled","NOT_APPROVED","PENDING","Dots","MigrateV2Pair","useParams","dispatch","useAppDispatch","useEffect","resetMintState","validatedAddress","isAddress","usePairContract","token0AddressCallState","NEVER_RELOAD","token0Address","token1Address","useToken","liquidityToken","Token","useTokenBalance","reserve0Raw","reserve1Raw","BodyWrapper","AutoRow","BackArrowLink","to","SettingsTab","autoSlippage","hideRoutingSettings","DeprecatedLargeHeader","Navigate","replace","formatLocaleNumber","number","locale","sigFigs","fixedDecimals","options","localeArg","numberString","SUPPORTED_LOCALES","DEFAULT_LOCALE","minimumFractionDigits","maximumFractionDigits","maximumSignificantDigits","parseFloat","toFixed","baseString","toLocaleString","decimalScale","isNative","formattedChainId","asSupportedChain","nativeOnChain"],"sourceRoot":""}