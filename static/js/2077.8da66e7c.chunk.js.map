{"version":3,"file":"static/js/2077.8da66e7c.chunk.js","mappings":"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","sources":["lib/hooks/routing/clientSideSmartOrderRouter.ts","utils/transformSwapRouteToGetQuoteResult.ts"],"sourcesContent":["import { BigintIsh, ChainId, CurrencyAmount, Token, TradeType } from '@uniswap/sdk-core'\r\n// This file is lazy-loaded, so the import of smart-order-router is intentional.\r\n// eslint-disable-next-line @typescript-eslint/no-restricted-imports\r\nimport { AlphaRouter, AlphaRouterConfig } from '@uniswap/smart-order-router'\r\nimport { asSupportedChain } from 'constants/chains'\r\nimport { DEPRECATED_RPC_PROVIDERS } from 'constants/providers'\r\nimport { nativeOnChain } from 'constants/tokens'\r\nimport JSBI from 'jsbi'\r\nimport { GetQuoteArgs, QuoteResult, QuoteState, SwapRouterNativeAssets } from 'state/routing/types'\r\nimport { transformSwapRouteToGetQuoteResult } from 'utils/transformSwapRouteToGetQuoteResult'\r\n\r\nconst routers = new Map<ChainId, AlphaRouter>()\r\nexport function getRouter(chainId: ChainId): AlphaRouter {\r\n  const router = routers.get(chainId)\r\n  if (router) return router\r\n\r\n  const supportedChainId = asSupportedChain(chainId)\r\n  if (supportedChainId) {\r\n    const provider = DEPRECATED_RPC_PROVIDERS[supportedChainId]\r\n    const router = new AlphaRouter({ chainId, provider })\r\n    routers.set(chainId, router)\r\n    return router\r\n  }\r\n\r\n  throw new Error(`Router does not support this chain (chainId: ${chainId}).`)\r\n}\r\n\r\nasync function getQuote(\r\n  {\r\n    tradeType,\r\n    tokenIn,\r\n    tokenOut,\r\n    amount: amountRaw,\r\n  }: {\r\n    tradeType: TradeType\r\n    tokenIn: { address: string; chainId: number; decimals: number; symbol?: string }\r\n    tokenOut: { address: string; chainId: number; decimals: number; symbol?: string }\r\n    amount: BigintIsh\r\n  },\r\n  router: AlphaRouter,\r\n  routerConfig: Partial<AlphaRouterConfig>\r\n): Promise<QuoteResult> {\r\n  const tokenInIsNative = Object.values(SwapRouterNativeAssets).includes(tokenIn.address as SwapRouterNativeAssets)\r\n  const tokenOutIsNative = Object.values(SwapRouterNativeAssets).includes(tokenOut.address as SwapRouterNativeAssets)\r\n\r\n  const currencyIn = tokenInIsNative\r\n    ? nativeOnChain(tokenIn.chainId)\r\n    : new Token(tokenIn.chainId, tokenIn.address, tokenIn.decimals, tokenIn.symbol)\r\n  const currencyOut = tokenOutIsNative\r\n    ? nativeOnChain(tokenOut.chainId)\r\n    : new Token(tokenOut.chainId, tokenOut.address, tokenOut.decimals, tokenOut.symbol)\r\n\r\n  const baseCurrency = tradeType === TradeType.EXACT_INPUT ? currencyIn : currencyOut\r\n  const quoteCurrency = tradeType === TradeType.EXACT_INPUT ? currencyOut : currencyIn\r\n\r\n  const amount = CurrencyAmount.fromRawAmount(baseCurrency, JSBI.BigInt(amountRaw))\r\n  // TODO (WEB-2055): explore initializing client side routing on first load (when amountRaw is null) if there are enough users using client-side router preference.\r\n  const swapRoute = await router.route(amount, quoteCurrency, tradeType, /*swapConfig=*/ undefined, routerConfig)\r\n\r\n  if (!swapRoute) {\r\n    return { state: QuoteState.NOT_FOUND }\r\n  }\r\n\r\n  return transformSwapRouteToGetQuoteResult(tradeType, amount, swapRoute)\r\n}\r\n\r\nexport async function getClientSideQuote(\r\n  {\r\n    tokenInAddress,\r\n    tokenInChainId,\r\n    tokenInDecimals,\r\n    tokenInSymbol,\r\n    tokenOutAddress,\r\n    tokenOutChainId,\r\n    tokenOutDecimals,\r\n    tokenOutSymbol,\r\n    amount,\r\n    tradeType,\r\n  }: GetQuoteArgs,\r\n  router: AlphaRouter,\r\n  config: Partial<AlphaRouterConfig>\r\n) {\r\n  return getQuote(\r\n    {\r\n      tradeType,\r\n      tokenIn: {\r\n        address: tokenInAddress,\r\n        chainId: tokenInChainId,\r\n        decimals: tokenInDecimals,\r\n        symbol: tokenInSymbol,\r\n      },\r\n      tokenOut: {\r\n        address: tokenOutAddress,\r\n        chainId: tokenOutChainId,\r\n        decimals: tokenOutDecimals,\r\n        symbol: tokenOutSymbol,\r\n      },\r\n      amount,\r\n    },\r\n    router,\r\n    config\r\n  )\r\n}\r\n","import { Protocol } from '@uniswap/router-sdk'\r\nimport { Currency, CurrencyAmount, TradeType } from '@uniswap/sdk-core'\r\n// This file is lazy-loaded, so the import of smart-order-router is intentional.\r\n// eslint-disable-next-line @typescript-eslint/no-restricted-imports\r\nimport { routeAmountsToString, SwapRoute } from '@uniswap/smart-order-router'\r\nimport { Pool } from '@uniswap/v3-sdk'\r\nimport { QuoteResult, QuoteState, URAQuoteType } from 'state/routing/types'\r\nimport { ClassicQuoteData, V2PoolInRoute, V3PoolInRoute } from 'state/routing/types'\r\n\r\n// from routing-api (https://github.com/Uniswap/routing-api/blob/main/lib/handlers/quote/quote.ts#L243-L311)\r\nexport function transformSwapRouteToGetQuoteResult(\r\n  tradeType: TradeType,\r\n  amount: CurrencyAmount<Currency>,\r\n  {\r\n    quote,\r\n    quoteGasAdjusted,\r\n    route,\r\n    estimatedGasUsed,\r\n    estimatedGasUsedQuoteToken,\r\n    estimatedGasUsedUSD,\r\n    gasPriceWei,\r\n    methodParameters,\r\n    blockNumber,\r\n  }: SwapRoute\r\n): QuoteResult {\r\n  const routeResponse: Array<(V3PoolInRoute | V2PoolInRoute)[]> = []\r\n\r\n  for (const subRoute of route) {\r\n    const { amount, quote, tokenPath } = subRoute\r\n\r\n    const pools = subRoute.protocol === Protocol.V2 ? subRoute.route.pairs : subRoute.route.pools\r\n    const curRoute: (V3PoolInRoute | V2PoolInRoute)[] = []\r\n    for (let i = 0; i < pools.length; i++) {\r\n      const nextPool = pools[i]\r\n      const tokenIn = tokenPath[i]\r\n      const tokenOut = tokenPath[i + 1]\r\n\r\n      let edgeAmountIn = undefined\r\n      if (i === 0) {\r\n        edgeAmountIn = tradeType === TradeType.EXACT_INPUT ? amount.quotient.toString() : quote.quotient.toString()\r\n      }\r\n\r\n      let edgeAmountOut = undefined\r\n      if (i === pools.length - 1) {\r\n        edgeAmountOut = tradeType === TradeType.EXACT_INPUT ? quote.quotient.toString() : amount.quotient.toString()\r\n      }\r\n\r\n      if (nextPool instanceof Pool) {\r\n        curRoute.push({\r\n          type: 'v3-pool',\r\n          tokenIn: {\r\n            chainId: tokenIn.chainId,\r\n            decimals: tokenIn.decimals,\r\n            address: tokenIn.address,\r\n            symbol: tokenIn.symbol,\r\n          },\r\n          tokenOut: {\r\n            chainId: tokenOut.chainId,\r\n            decimals: tokenOut.decimals,\r\n            address: tokenOut.address,\r\n            symbol: tokenOut.symbol,\r\n          },\r\n          fee: nextPool.fee.toString(),\r\n          liquidity: nextPool.liquidity.toString(),\r\n          sqrtRatioX96: nextPool.sqrtRatioX96.toString(),\r\n          tickCurrent: nextPool.tickCurrent.toString(),\r\n          amountIn: edgeAmountIn,\r\n          amountOut: edgeAmountOut,\r\n        })\r\n      } else {\r\n        const reserve0 = nextPool.reserve0\r\n        const reserve1 = nextPool.reserve1\r\n\r\n        curRoute.push({\r\n          type: 'v2-pool',\r\n          tokenIn: {\r\n            chainId: tokenIn.chainId,\r\n            decimals: tokenIn.decimals,\r\n            address: tokenIn.address,\r\n            symbol: tokenIn.symbol,\r\n          },\r\n          tokenOut: {\r\n            chainId: tokenOut.chainId,\r\n            decimals: tokenOut.decimals,\r\n            address: tokenOut.address,\r\n            symbol: tokenOut.symbol,\r\n          },\r\n          reserve0: {\r\n            token: {\r\n              chainId: reserve0.currency.wrapped.chainId,\r\n              decimals: reserve0.currency.wrapped.decimals,\r\n              address: reserve0.currency.wrapped.address,\r\n              symbol: reserve0.currency.wrapped.symbol,\r\n            },\r\n            quotient: reserve0.quotient.toString(),\r\n          },\r\n          reserve1: {\r\n            token: {\r\n              chainId: reserve1.currency.wrapped.chainId,\r\n              decimals: reserve1.currency.wrapped.decimals,\r\n              address: reserve1.currency.wrapped.address,\r\n              symbol: reserve1.currency.wrapped.symbol,\r\n            },\r\n            quotient: reserve1.quotient.toString(),\r\n          },\r\n          amountIn: edgeAmountIn,\r\n          amountOut: edgeAmountOut,\r\n        })\r\n      }\r\n    }\r\n\r\n    routeResponse.push(curRoute)\r\n  }\r\n\r\n  const result: ClassicQuoteData = {\r\n    methodParameters,\r\n    blockNumber: blockNumber.toString(),\r\n    amount: amount.quotient.toString(),\r\n    amountDecimals: amount.toExact(),\r\n    quote: quote.quotient.toString(),\r\n    quoteDecimals: quote.toExact(),\r\n    quoteGasAdjusted: quoteGasAdjusted.quotient.toString(),\r\n    quoteGasAdjustedDecimals: quoteGasAdjusted.toExact(),\r\n    gasUseEstimateQuote: estimatedGasUsedQuoteToken.quotient.toString(),\r\n    gasUseEstimateQuoteDecimals: estimatedGasUsedQuoteToken.toExact(),\r\n    gasUseEstimate: estimatedGasUsed.toString(),\r\n    gasUseEstimateUSD: estimatedGasUsedUSD.toExact(),\r\n    gasPriceWei: gasPriceWei.toString(),\r\n    route: routeResponse,\r\n    routeString: routeAmountsToString(route),\r\n  }\r\n\r\n  return { state: QuoteState.SUCCESS, data: { routing: URAQuoteType.CLASSIC, quote: result, allQuotes: [] } }\r\n}\r\n"],"names":["routers","Map","getRouter","chainId","router","get","supportedChainId","asSupportedChain","provider","DEPRECATED_RPC_PROVIDERS","AlphaRouter","set","Error","async","getQuote","tradeType","tokenIn","tokenOut","amount","amountRaw","routerConfig","tokenInIsNative","Object","values","SwapRouterNativeAssets","includes","address","tokenOutIsNative","currencyIn","nativeOnChain","Token","decimals","symbol","currencyOut","baseCurrency","TradeType","EXACT_INPUT","quoteCurrency","CurrencyAmount","fromRawAmount","JSBI","swapRoute","route","undefined","quote","quoteGasAdjusted","estimatedGasUsed","estimatedGasUsedQuoteToken","estimatedGasUsedUSD","gasPriceWei","methodParameters","blockNumber","routeResponse","subRoute","tokenPath","pools","protocol","Protocol","V2","pairs","curRoute","i","length","nextPool","edgeAmountIn","edgeAmountOut","quotient","toString","Pool","push","type","fee","liquidity","sqrtRatioX96","tickCurrent","amountIn","amountOut","reserve0","reserve1","token","currency","wrapped","result","amountDecimals","toExact","quoteDecimals","quoteGasAdjustedDecimals","gasUseEstimateQuote","gasUseEstimateQuoteDecimals","gasUseEstimate","gasUseEstimateUSD","routeString","routeAmountsToString","state","QuoteState","SUCCESS","data","routing","URAQuoteType","CLASSIC","allQuotes","transformSwapRouteToGetQuoteResult","NOT_FOUND","getClientSideQuote","tokenInAddress","tokenInChainId","tokenInDecimals","tokenInSymbol","tokenOutAddress","tokenOutChainId","tokenOutDecimals","tokenOutSymbol","config"],"sourceRoot":""}