{"version":3,"file":"static/js/1704.fb347913.chunk.js","mappings":"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","sources":["lib/hooks/useApproval.ts","hooks/useApproveCallback.ts","state/mint/hooks.tsx","pages/AddLiquidityV2/ConfirmAddModalBottom.tsx","pages/AddLiquidityV2/PoolPriceBar.tsx","pages/AddLiquidityV2/index.tsx","pages/AddLiquidityV2/redirects.tsx","pages/AppBody.tsx","pages/Pool/styled.tsx","utils/calculateSlippageAmount.ts","utils/unwrappedToken.ts","../node_modules/react-feather/dist/icons/plus.js"],"sourcesContent":["import { MaxUint256 } from '@ethersproject/constants'\r\nimport type { TransactionResponse } from '@ethersproject/providers'\r\nimport { InterfaceEventName } from '@uniswap/analytics-events'\r\nimport { Currency, CurrencyAmount, Token } from '@uniswap/sdk-core'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { sendAnalyticsEvent } from 'analytics'\r\nimport { useTokenContract } from 'hooks/useContract'\r\nimport { useTokenAllowance } from 'hooks/useTokenAllowance'\r\nimport { getTokenAddress } from 'lib/utils/analytics'\r\nimport { useCallback, useMemo } from 'react'\r\nimport { calculateGasMargin } from 'utils/calculateGasMargin'\r\n\r\nexport enum ApprovalState {\r\n  UNKNOWN = 'UNKNOWN',\r\n  NOT_APPROVED = 'NOT_APPROVED',\r\n  PENDING = 'PENDING',\r\n  APPROVED = 'APPROVED',\r\n}\r\n\r\nfunction useApprovalStateForSpender(\r\n  amountToApprove: CurrencyAmount<Currency> | undefined,\r\n  spender: string | undefined,\r\n  useIsPendingApproval: (token?: Token, spender?: string) => boolean\r\n): ApprovalState {\r\n  const { account } = useWeb3React()\r\n  const token = amountToApprove?.currency?.isToken ? amountToApprove.currency : undefined\r\n\r\n  const { tokenAllowance } = useTokenAllowance(token, account ?? undefined, spender)\r\n  const pendingApproval = useIsPendingApproval(token, spender)\r\n\r\n  return useMemo(() => {\r\n    if (!amountToApprove || !spender) return ApprovalState.UNKNOWN\r\n    if (amountToApprove.currency.isNative) return ApprovalState.APPROVED\r\n    // we might not have enough data to know whether or not we need to approve\r\n    if (!tokenAllowance) return ApprovalState.UNKNOWN\r\n\r\n    // amountToApprove will be defined if tokenAllowance is\r\n    return tokenAllowance.lessThan(amountToApprove)\r\n      ? pendingApproval\r\n        ? ApprovalState.PENDING\r\n        : ApprovalState.NOT_APPROVED\r\n      : ApprovalState.APPROVED\r\n  }, [amountToApprove, pendingApproval, spender, tokenAllowance])\r\n}\r\n\r\nexport function useApproval(\r\n  amountToApprove: CurrencyAmount<Currency> | undefined,\r\n  spender: string | undefined,\r\n  useIsPendingApproval: (token?: Token, spender?: string) => boolean\r\n): [\r\n  ApprovalState,\r\n  () => Promise<\r\n    | { response: TransactionResponse; tokenAddress: string; spenderAddress: string; amount: CurrencyAmount<Currency> }\r\n    | undefined\r\n  >\r\n] {\r\n  const { chainId } = useWeb3React()\r\n  const token = amountToApprove?.currency?.isToken ? amountToApprove.currency : undefined\r\n\r\n  // check the current approval status\r\n  const approvalState = useApprovalStateForSpender(amountToApprove, spender, useIsPendingApproval)\r\n\r\n  const tokenContract = useTokenContract(token?.address)\r\n\r\n  const approve = useCallback(async () => {\r\n    function logFailure(error: Error | string): undefined {\r\n      console.warn(`${token?.symbol || 'Token'} approval failed:`, error)\r\n      return\r\n    }\r\n\r\n    // Bail early if there is an issue.\r\n    if (approvalState !== ApprovalState.NOT_APPROVED) {\r\n      return logFailure('approve was called unnecessarily')\r\n    } else if (!chainId) {\r\n      return logFailure('no chainId')\r\n    } else if (!token) {\r\n      return logFailure('no token')\r\n    } else if (!tokenContract) {\r\n      return logFailure('tokenContract is null')\r\n    } else if (!amountToApprove) {\r\n      return logFailure('missing amount to approve')\r\n    } else if (!spender) {\r\n      return logFailure('no spender')\r\n    }\r\n\r\n    let useExact = false\r\n    const estimatedGas = await tokenContract.estimateGas.approve(spender, MaxUint256).catch(() => {\r\n      // general fallback for tokens which restrict approval amounts\r\n      useExact = true\r\n      return tokenContract.estimateGas.approve(spender, amountToApprove.quotient.toString())\r\n    })\r\n\r\n    return tokenContract\r\n      .approve(spender, useExact ? amountToApprove.quotient.toString() : MaxUint256, {\r\n        gasLimit: calculateGasMargin(estimatedGas),\r\n      })\r\n      .then((response) => {\r\n        const eventProperties = {\r\n          chain_id: chainId,\r\n          token_symbol: token?.symbol,\r\n          token_address: getTokenAddress(token),\r\n        }\r\n        sendAnalyticsEvent(InterfaceEventName.APPROVE_TOKEN_TXN_SUBMITTED, eventProperties)\r\n        return {\r\n          response,\r\n          tokenAddress: token.address,\r\n          spenderAddress: spender,\r\n          amount: amountToApprove,\r\n        }\r\n      })\r\n      .catch((error: Error) => {\r\n        logFailure(error)\r\n        throw error\r\n      })\r\n  }, [approvalState, token, tokenContract, amountToApprove, spender, chainId])\r\n\r\n  return [approvalState, approve]\r\n}\r\n","import { Currency, CurrencyAmount } from '@uniswap/sdk-core'\r\nimport { ApprovalState, useApproval } from 'lib/hooks/useApproval'\r\nimport { useCallback } from 'react'\r\n\r\nimport { useHasPendingApproval, useTransactionAdder } from '../state/transactions/hooks'\r\nimport { TransactionType } from '../state/transactions/types'\r\nexport { ApprovalState } from 'lib/hooks/useApproval'\r\n\r\nfunction useGetAndTrackApproval(getApproval: ReturnType<typeof useApproval>[1]) {\r\n  const addTransaction = useTransactionAdder()\r\n  return useCallback(() => {\r\n    return getApproval().then((pending) => {\r\n      if (pending) {\r\n        const { response, tokenAddress, spenderAddress: spender, amount } = pending\r\n        addTransaction(response, {\r\n          type: TransactionType.APPROVAL,\r\n          tokenAddress,\r\n          spender,\r\n          amount: amount.quotient.toString(),\r\n        })\r\n      }\r\n    })\r\n  }, [addTransaction, getApproval])\r\n}\r\n\r\n// returns a variable indicating the state of the approval and a function which approves if necessary or early returns\r\nexport function useApproveCallback(\r\n  amountToApprove?: CurrencyAmount<Currency>,\r\n  spender?: string\r\n): [ApprovalState, () => Promise<void>] {\r\n  const [approval, getApproval] = useApproval(amountToApprove, spender, useHasPendingApproval)\r\n  return [approval, useGetAndTrackApproval(getApproval)]\r\n}\r\n","import { Trans } from '@lingui/macro'\r\nimport { Currency, CurrencyAmount, Percent, Price, Token } from '@uniswap/sdk-core'\r\nimport { Pair } from '@uniswap/v2-sdk'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport JSBI from 'jsbi'\r\nimport tryParseCurrencyAmount from 'lib/utils/tryParseCurrencyAmount'\r\nimport { ReactNode, useCallback, useMemo } from 'react'\r\nimport { useAppDispatch, useAppSelector } from 'state/hooks'\r\n\r\nimport { useTotalSupply } from '../../hooks/useTotalSupply'\r\nimport { PairState, useV2Pair } from '../../hooks/useV2Pairs'\r\nimport { useCurrencyBalances } from '../connection/hooks'\r\nimport { AppState } from '../reducer'\r\nimport { Field, typeInput } from './actions'\r\n\r\nconst ZERO = JSBI.BigInt(0)\r\n\r\nexport function useMintState(): AppState['mint'] {\r\n  return useAppSelector((state) => state.mint)\r\n}\r\n\r\nexport function useMintActionHandlers(noLiquidity: boolean | undefined): {\r\n  onFieldAInput: (typedValue: string) => void\r\n  onFieldBInput: (typedValue: string) => void\r\n} {\r\n  const dispatch = useAppDispatch()\r\n\r\n  const onFieldAInput = useCallback(\r\n    (typedValue: string) => {\r\n      dispatch(typeInput({ field: Field.CURRENCY_A, typedValue, noLiquidity: noLiquidity === true }))\r\n    },\r\n    [dispatch, noLiquidity]\r\n  )\r\n\r\n  const onFieldBInput = useCallback(\r\n    (typedValue: string) => {\r\n      dispatch(typeInput({ field: Field.CURRENCY_B, typedValue, noLiquidity: noLiquidity === true }))\r\n    },\r\n    [dispatch, noLiquidity]\r\n  )\r\n\r\n  return {\r\n    onFieldAInput,\r\n    onFieldBInput,\r\n  }\r\n}\r\n\r\nexport function useDerivedMintInfo(\r\n  currencyA: Currency | undefined,\r\n  currencyB: Currency | undefined\r\n): {\r\n  dependentField: Field\r\n  currencies: { [field in Field]?: Currency }\r\n  pair?: Pair | null\r\n  pairState: PairState\r\n  currencyBalances: { [field in Field]?: CurrencyAmount<Currency> }\r\n  parsedAmounts: { [field in Field]?: CurrencyAmount<Currency> }\r\n  price?: Price<Currency, Currency>\r\n  noLiquidity?: boolean\r\n  liquidityMinted?: CurrencyAmount<Token>\r\n  poolTokenPercentage?: Percent\r\n  error?: ReactNode\r\n} {\r\n  const { account } = useWeb3React()\r\n\r\n  const { independentField, typedValue, otherTypedValue } = useMintState()\r\n\r\n  const dependentField = independentField === Field.CURRENCY_A ? Field.CURRENCY_B : Field.CURRENCY_A\r\n\r\n  // tokens\r\n  const currencies: { [field in Field]?: Currency } = useMemo(\r\n    () => ({\r\n      [Field.CURRENCY_A]: currencyA ?? undefined,\r\n      [Field.CURRENCY_B]: currencyB ?? undefined,\r\n    }),\r\n    [currencyA, currencyB]\r\n  )\r\n\r\n  // pair\r\n  const [pairState, pair] = useV2Pair(currencies[Field.CURRENCY_A], currencies[Field.CURRENCY_B])\r\n  const totalSupply = useTotalSupply(pair?.liquidityToken)\r\n\r\n  const noLiquidity: boolean =\r\n    pairState === PairState.NOT_EXISTS ||\r\n    Boolean(totalSupply && JSBI.equal(totalSupply.quotient, ZERO)) ||\r\n    Boolean(\r\n      pairState === PairState.EXISTS &&\r\n        pair &&\r\n        JSBI.equal(pair.reserve0.quotient, ZERO) &&\r\n        JSBI.equal(pair.reserve1.quotient, ZERO)\r\n    )\r\n\r\n  // balances\r\n  const balances = useCurrencyBalances(\r\n    account ?? undefined,\r\n    useMemo(() => [currencies[Field.CURRENCY_A], currencies[Field.CURRENCY_B]], [currencies])\r\n  )\r\n  const currencyBalances: { [field in Field]?: CurrencyAmount<Currency> } = {\r\n    [Field.CURRENCY_A]: balances[0],\r\n    [Field.CURRENCY_B]: balances[1],\r\n  }\r\n\r\n  // amounts\r\n  const independentAmount: CurrencyAmount<Currency> | undefined = tryParseCurrencyAmount(\r\n    typedValue,\r\n    currencies[independentField]\r\n  )\r\n  const dependentAmount: CurrencyAmount<Currency> | undefined = useMemo(() => {\r\n    if (noLiquidity) {\r\n      if (otherTypedValue && currencies[dependentField]) {\r\n        return tryParseCurrencyAmount(otherTypedValue, currencies[dependentField])\r\n      }\r\n      return undefined\r\n    } else if (independentAmount) {\r\n      // we wrap the currencies just to get the price in terms of the other token\r\n      const wrappedIndependentAmount = independentAmount?.wrapped\r\n      const [tokenA, tokenB] = [currencyA?.wrapped, currencyB?.wrapped]\r\n      if (tokenA && tokenB && wrappedIndependentAmount && pair) {\r\n        const dependentCurrency = dependentField === Field.CURRENCY_B ? currencyB : currencyA\r\n        const dependentTokenAmount =\r\n          dependentField === Field.CURRENCY_B\r\n            ? pair.priceOf(tokenA).quote(wrappedIndependentAmount)\r\n            : pair.priceOf(tokenB).quote(wrappedIndependentAmount)\r\n        return dependentCurrency?.isNative\r\n          ? CurrencyAmount.fromRawAmount(dependentCurrency, dependentTokenAmount.quotient)\r\n          : dependentTokenAmount\r\n      }\r\n      return undefined\r\n    } else {\r\n      return undefined\r\n    }\r\n  }, [noLiquidity, otherTypedValue, currencies, dependentField, independentAmount, currencyA, currencyB, pair])\r\n\r\n  const parsedAmounts: { [field in Field]: CurrencyAmount<Currency> | undefined } = useMemo(() => {\r\n    return {\r\n      [Field.CURRENCY_A]: independentField === Field.CURRENCY_A ? independentAmount : dependentAmount,\r\n      [Field.CURRENCY_B]: independentField === Field.CURRENCY_A ? dependentAmount : independentAmount,\r\n    }\r\n  }, [dependentAmount, independentAmount, independentField])\r\n\r\n  const price = useMemo(() => {\r\n    if (noLiquidity) {\r\n      const { [Field.CURRENCY_A]: currencyAAmount, [Field.CURRENCY_B]: currencyBAmount } = parsedAmounts\r\n      if (currencyAAmount?.greaterThan(0) && currencyBAmount?.greaterThan(0)) {\r\n        const value = currencyBAmount.divide(currencyAAmount)\r\n        return new Price(currencyAAmount.currency, currencyBAmount.currency, value.denominator, value.numerator)\r\n      }\r\n      return undefined\r\n    } else {\r\n      const wrappedCurrencyA = currencyA?.wrapped\r\n      return pair && wrappedCurrencyA ? pair.priceOf(wrappedCurrencyA) : undefined\r\n    }\r\n  }, [currencyA, noLiquidity, pair, parsedAmounts])\r\n\r\n  // liquidity minted\r\n  const liquidityMinted = useMemo(() => {\r\n    const { [Field.CURRENCY_A]: currencyAAmount, [Field.CURRENCY_B]: currencyBAmount } = parsedAmounts\r\n    const [tokenAmountA, tokenAmountB] = [currencyAAmount?.wrapped, currencyBAmount?.wrapped]\r\n    if (pair && totalSupply && tokenAmountA && tokenAmountB) {\r\n      try {\r\n        return pair.getLiquidityMinted(totalSupply, tokenAmountA, tokenAmountB)\r\n      } catch (error) {\r\n        console.error(error)\r\n        return undefined\r\n      }\r\n    } else {\r\n      return undefined\r\n    }\r\n  }, [parsedAmounts, pair, totalSupply])\r\n\r\n  const poolTokenPercentage = useMemo(() => {\r\n    if (liquidityMinted && totalSupply) {\r\n      return new Percent(liquidityMinted.quotient, totalSupply.add(liquidityMinted).quotient)\r\n    } else {\r\n      return undefined\r\n    }\r\n  }, [liquidityMinted, totalSupply])\r\n\r\n  let error: ReactNode | undefined\r\n  if (!account) {\r\n    error = <Trans>Connect wallet</Trans>\r\n  }\r\n\r\n  if (pairState === PairState.INVALID) {\r\n    error = error ?? <Trans>Invalid pair</Trans>\r\n  }\r\n\r\n  if (!parsedAmounts[Field.CURRENCY_A] || !parsedAmounts[Field.CURRENCY_B]) {\r\n    error = error ?? <Trans>Enter an amount</Trans>\r\n  }\r\n\r\n  const { [Field.CURRENCY_A]: currencyAAmount, [Field.CURRENCY_B]: currencyBAmount } = parsedAmounts\r\n\r\n  if (currencyAAmount && currencyBalances?.[Field.CURRENCY_A]?.lessThan(currencyAAmount)) {\r\n    error = <Trans>Insufficient {currencies[Field.CURRENCY_A]?.symbol} balance</Trans>\r\n  }\r\n\r\n  if (currencyBAmount && currencyBalances?.[Field.CURRENCY_B]?.lessThan(currencyBAmount)) {\r\n    error = <Trans>Insufficient {currencies[Field.CURRENCY_B]?.symbol} balance</Trans>\r\n  }\r\n\r\n  return {\r\n    dependentField,\r\n    currencies,\r\n    pair,\r\n    pairState,\r\n    currencyBalances,\r\n    parsedAmounts,\r\n    price,\r\n    noLiquidity,\r\n    liquidityMinted,\r\n    poolTokenPercentage,\r\n    error,\r\n  }\r\n}\r\n","import { Trans } from '@lingui/macro'\r\nimport { Currency, CurrencyAmount, Fraction, Percent } from '@uniswap/sdk-core'\r\nimport { Text } from 'rebass'\r\nimport { ThemedText } from 'theme/components'\r\n\r\nimport { ButtonPrimary } from '../../components/Button'\r\nimport CurrencyLogo from '../../components/Logo/CurrencyLogo'\r\nimport { RowBetween, RowFixed } from '../../components/Row'\r\nimport { Field } from '../../state/mint/actions'\r\n\r\nexport function ConfirmAddModalBottom({\r\n  noLiquidity,\r\n  price,\r\n  currencies,\r\n  parsedAmounts,\r\n  poolTokenPercentage,\r\n  onAdd,\r\n}: {\r\n  noLiquidity?: boolean\r\n  price?: Fraction\r\n  currencies: { [field in Field]?: Currency }\r\n  parsedAmounts: { [field in Field]?: CurrencyAmount<Currency> }\r\n  poolTokenPercentage?: Percent\r\n  onAdd: () => void\r\n}) {\r\n  return (\r\n    <>\r\n      <RowBetween>\r\n        <ThemedText.DeprecatedBody>\r\n          <Trans>{currencies[Field.CURRENCY_A]?.symbol} Deposited</Trans>\r\n        </ThemedText.DeprecatedBody>\r\n        <RowFixed>\r\n          <CurrencyLogo currency={currencies[Field.CURRENCY_A]} style={{ marginRight: '8px' }} />\r\n          <ThemedText.DeprecatedBody>{parsedAmounts[Field.CURRENCY_A]?.toSignificant(6)}</ThemedText.DeprecatedBody>\r\n        </RowFixed>\r\n      </RowBetween>\r\n      <RowBetween>\r\n        <ThemedText.DeprecatedBody>\r\n          <Trans>{currencies[Field.CURRENCY_B]?.symbol} Deposited</Trans>\r\n        </ThemedText.DeprecatedBody>\r\n        <RowFixed>\r\n          <CurrencyLogo currency={currencies[Field.CURRENCY_B]} style={{ marginRight: '8px' }} />\r\n          <ThemedText.DeprecatedBody>{parsedAmounts[Field.CURRENCY_B]?.toSignificant(6)}</ThemedText.DeprecatedBody>\r\n        </RowFixed>\r\n      </RowBetween>\r\n      <RowBetween>\r\n        <ThemedText.DeprecatedBody>\r\n          <Trans>Rates</Trans>\r\n        </ThemedText.DeprecatedBody>\r\n        <ThemedText.DeprecatedBody>\r\n          {`1 ${currencies[Field.CURRENCY_A]?.symbol} = ${price?.toSignificant(4)} ${\r\n            currencies[Field.CURRENCY_B]?.symbol\r\n          }`}\r\n        </ThemedText.DeprecatedBody>\r\n      </RowBetween>\r\n      <RowBetween style={{ justifyContent: 'flex-end' }}>\r\n        <ThemedText.DeprecatedBody>\r\n          {`1 ${currencies[Field.CURRENCY_B]?.symbol} = ${price?.invert().toSignificant(4)} ${\r\n            currencies[Field.CURRENCY_A]?.symbol\r\n          }`}\r\n        </ThemedText.DeprecatedBody>\r\n      </RowBetween>\r\n      <RowBetween>\r\n        <ThemedText.DeprecatedBody>\r\n          <Trans>Share of Pool:</Trans>\r\n        </ThemedText.DeprecatedBody>\r\n        <ThemedText.DeprecatedBody>\r\n          <Trans>{noLiquidity ? '100' : poolTokenPercentage?.toSignificant(4)}%</Trans>\r\n        </ThemedText.DeprecatedBody>\r\n      </RowBetween>\r\n      <ButtonPrimary style={{ margin: '20px 0 0 0' }} onClick={onAdd}>\r\n        <Text fontWeight={535} fontSize={20}>\r\n          {noLiquidity ? <Trans>Create pool & supply</Trans> : <Trans>Confirm supply</Trans>}\r\n        </Text>\r\n      </ButtonPrimary>\r\n    </>\r\n  )\r\n}\r\n","import { Trans } from '@lingui/macro'\r\nimport { Currency, Percent, Price } from '@uniswap/sdk-core'\r\nimport { Text } from 'rebass'\r\nimport { useTheme } from 'styled-components'\r\nimport { ThemedText } from 'theme/components'\r\n\r\nimport { AutoColumn } from '../../components/Column'\r\nimport { AutoRow } from '../../components/Row'\r\nimport { ONE_BIPS } from '../../constants/misc'\r\nimport { Field } from '../../state/mint/actions'\r\n\r\nexport function PoolPriceBar({\r\n  currencies,\r\n  noLiquidity,\r\n  poolTokenPercentage,\r\n  price,\r\n}: {\r\n  currencies: { [field in Field]?: Currency }\r\n  noLiquidity?: boolean\r\n  poolTokenPercentage?: Percent\r\n  price?: Price<Currency, Currency>\r\n}) {\r\n  const theme = useTheme()\r\n\r\n  let invertedPrice: string | undefined\r\n  try {\r\n    invertedPrice = price?.invert()?.toSignificant(6)\r\n  } catch (error) {\r\n    invertedPrice = undefined\r\n  }\r\n\r\n  return (\r\n    <AutoColumn gap=\"md\">\r\n      <AutoRow justify=\"space-around\" gap=\"4px\">\r\n        <AutoColumn justify=\"center\">\r\n          <ThemedText.DeprecatedBlack data-testid=\"currency-b-price\">\r\n            {price?.toSignificant(6) ?? '-'}\r\n          </ThemedText.DeprecatedBlack>\r\n          <Text fontWeight={535} fontSize={14} color={theme.neutral2} pt={1}>\r\n            <Trans>\r\n              {currencies[Field.CURRENCY_B]?.symbol} per {currencies[Field.CURRENCY_A]?.symbol}\r\n            </Trans>\r\n          </Text>\r\n        </AutoColumn>\r\n        <AutoColumn justify=\"center\">\r\n          <ThemedText.DeprecatedBlack data-testid=\"currency-a-price\">{invertedPrice ?? '-'}</ThemedText.DeprecatedBlack>\r\n          <Text fontWeight={535} fontSize={14} color={theme.neutral2} pt={1}>\r\n            <Trans>\r\n              {currencies[Field.CURRENCY_A]?.symbol} per {currencies[Field.CURRENCY_B]?.symbol}\r\n            </Trans>\r\n          </Text>\r\n        </AutoColumn>\r\n        <AutoColumn justify=\"center\">\r\n          <ThemedText.DeprecatedBlack>\r\n            {noLiquidity && price\r\n              ? '100'\r\n              : (poolTokenPercentage?.lessThan(ONE_BIPS) ? '<0.01' : poolTokenPercentage?.toFixed(2)) ?? '0'}\r\n            %\r\n          </ThemedText.DeprecatedBlack>\r\n          <Text fontWeight={535} fontSize={14} color={theme.neutral2} pt={1}>\r\n            <Trans>Share of pool</Trans>\r\n          </Text>\r\n        </AutoColumn>\r\n      </AutoRow>\r\n    </AutoColumn>\r\n  )\r\n}\r\n","import { BigNumber } from '@ethersproject/bignumber'\r\nimport type { TransactionResponse } from '@ethersproject/providers'\r\nimport { Trans } from '@lingui/macro'\r\nimport { BrowserEvent, InterfaceElementName, InterfaceEventName, LiquidityEventName } from '@uniswap/analytics-events'\r\nimport { Currency, CurrencyAmount, Percent } from '@uniswap/sdk-core'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { sendAnalyticsEvent, TraceEvent, useTrace } from 'analytics'\r\nimport { useToggleAccountDrawer } from 'components/AccountDrawer'\r\nimport UnsupportedCurrencyFooter from 'components/swap/UnsupportedCurrencyFooter'\r\nimport { SwitchLocaleLink } from 'components/SwitchLocaleLink'\r\nimport { V2Unsupported } from 'components/V2Unsupported'\r\nimport { useNetworkSupportsV2 } from 'hooks/useNetworkSupportsV2'\r\nimport { useCallback, useState } from 'react'\r\nimport { Plus } from 'react-feather'\r\nimport { useLocation, useNavigate, useParams } from 'react-router-dom'\r\nimport { Text } from 'rebass'\r\nimport styled, { useTheme } from 'styled-components'\r\nimport { ThemedText } from 'theme/components'\r\n\r\nimport { ButtonError, ButtonLight, ButtonPrimary } from '../../components/Button'\r\nimport { BlueCard, LightCard } from '../../components/Card'\r\nimport { AutoColumn, ColumnCenter } from '../../components/Column'\r\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel'\r\nimport DoubleCurrencyLogo from '../../components/DoubleLogo'\r\nimport { AddRemoveTabs } from '../../components/NavigationTabs'\r\nimport { MinimalPositionCard } from '../../components/PositionCard'\r\nimport Row, { AutoRow, RowBetween, RowFlat } from '../../components/Row'\r\nimport TransactionConfirmationModal, { ConfirmationModalContent } from '../../components/TransactionConfirmationModal'\r\nimport { ZERO_PERCENT } from '../../constants/misc'\r\nimport { WRAPPED_NATIVE_CURRENCY } from '../../constants/tokens'\r\nimport { useCurrency } from '../../hooks/Tokens'\r\nimport { ApprovalState, useApproveCallback } from '../../hooks/useApproveCallback'\r\nimport { useV2RouterContract } from '../../hooks/useContract'\r\nimport { useIsSwapUnsupported } from '../../hooks/useIsSwapUnsupported'\r\nimport useTransactionDeadline from '../../hooks/useTransactionDeadline'\r\nimport { PairState } from '../../hooks/useV2Pairs'\r\nimport { Field } from '../../state/mint/actions'\r\nimport { useDerivedMintInfo, useMintActionHandlers, useMintState } from '../../state/mint/hooks'\r\nimport { useTransactionAdder } from '../../state/transactions/hooks'\r\nimport { TransactionInfo, TransactionType } from '../../state/transactions/types'\r\nimport { useUserSlippageToleranceWithDefault } from '../../state/user/hooks'\r\nimport { calculateGasMargin } from '../../utils/calculateGasMargin'\r\nimport { calculateSlippageAmount } from '../../utils/calculateSlippageAmount'\r\nimport { currencyId } from '../../utils/currencyId'\r\nimport { maxAmountSpend } from '../../utils/maxAmountSpend'\r\nimport AppBody from '../AppBody'\r\nimport { Dots, Wrapper } from '../Pool/styled'\r\nimport { ConfirmAddModalBottom } from './ConfirmAddModalBottom'\r\nimport { PoolPriceBar } from './PoolPriceBar'\r\n\r\nconst DEFAULT_ADD_V2_SLIPPAGE_TOLERANCE = new Percent(50, 10_000)\r\n\r\nconst AddLiquidityHeaderContainer = styled(AutoColumn)`\r\n  gap: 20px;\r\n  margin-bottom: 16px;\r\n`\r\n\r\nexport default function AddLiquidity() {\r\n  const { currencyIdA, currencyIdB } = useParams<{ currencyIdA?: string; currencyIdB?: string }>()\r\n  const navigate = useNavigate()\r\n  const { account, chainId, provider } = useWeb3React()\r\n\r\n  const theme = useTheme()\r\n  const trace = useTrace()\r\n\r\n  const currencyA = useCurrency(currencyIdA)\r\n  const currencyB = useCurrency(currencyIdB)\r\n\r\n  const wrappedNativeCurrency = chainId ? WRAPPED_NATIVE_CURRENCY[chainId] : undefined\r\n\r\n  const oneCurrencyIsWETH = Boolean(\r\n    chainId &&\r\n      wrappedNativeCurrency &&\r\n      ((currencyA && currencyA.equals(wrappedNativeCurrency)) || (currencyB && currencyB.equals(wrappedNativeCurrency)))\r\n  )\r\n\r\n  const toggleWalletDrawer = useToggleAccountDrawer() // toggle wallet when disconnected\r\n\r\n  // mint state\r\n  const { independentField, typedValue, otherTypedValue } = useMintState()\r\n  const {\r\n    dependentField,\r\n    currencies,\r\n    pair,\r\n    pairState,\r\n    currencyBalances,\r\n    parsedAmounts,\r\n    price,\r\n    noLiquidity,\r\n    liquidityMinted,\r\n    poolTokenPercentage,\r\n    error,\r\n  } = useDerivedMintInfo(currencyA ?? undefined, currencyB ?? undefined)\r\n\r\n  const { onFieldAInput, onFieldBInput } = useMintActionHandlers(noLiquidity)\r\n\r\n  const isValid = !error\r\n\r\n  // modal and loading\r\n  const [showConfirm, setShowConfirm] = useState<boolean>(false)\r\n  const [attemptingTxn, setAttemptingTxn] = useState<boolean>(false) // clicked confirm\r\n\r\n  // txn values\r\n  const deadline = useTransactionDeadline() // custom from users settings\r\n  const allowedSlippage = useUserSlippageToleranceWithDefault(DEFAULT_ADD_V2_SLIPPAGE_TOLERANCE) // custom from users\r\n  const [txHash, setTxHash] = useState<string>('')\r\n\r\n  // get formatted amounts\r\n  const formattedAmounts = {\r\n    [independentField]: typedValue,\r\n    [dependentField]: noLiquidity ? otherTypedValue : parsedAmounts[dependentField]?.toSignificant(6) ?? '',\r\n  }\r\n\r\n  // get the max amounts user can add\r\n  const maxAmounts: { [field in Field]?: CurrencyAmount<Currency> } = [Field.CURRENCY_A, Field.CURRENCY_B].reduce(\r\n    (accumulator, field) => {\r\n      return {\r\n        ...accumulator,\r\n        [field]: maxAmountSpend(currencyBalances[field]),\r\n      }\r\n    },\r\n    {}\r\n  )\r\n\r\n  const atMaxAmounts: { [field in Field]?: CurrencyAmount<Currency> } = [Field.CURRENCY_A, Field.CURRENCY_B].reduce(\r\n    (accumulator, field) => {\r\n      return {\r\n        ...accumulator,\r\n        [field]: maxAmounts[field]?.equalTo(parsedAmounts[field] ?? '0'),\r\n      }\r\n    },\r\n    {}\r\n  )\r\n\r\n  const router = useV2RouterContract()\r\n\r\n  // check whether the user has approved the router on the tokens\r\n  const [approvalA, approveACallback] = useApproveCallback(parsedAmounts[Field.CURRENCY_A], router?.address)\r\n  const [approvalB, approveBCallback] = useApproveCallback(parsedAmounts[Field.CURRENCY_B], router?.address)\r\n\r\n  const addTransaction = useTransactionAdder()\r\n  const networkSupportsV2 = useNetworkSupportsV2()\r\n\r\n  async function onAdd() {\r\n    if (!chainId || !provider || !account || !router || !networkSupportsV2) return\r\n\r\n    const { [Field.CURRENCY_A]: parsedAmountA, [Field.CURRENCY_B]: parsedAmountB } = parsedAmounts\r\n    if (!parsedAmountA || !parsedAmountB || !currencyA || !currencyB || !deadline) {\r\n      return\r\n    }\r\n\r\n    const amountsMin = {\r\n      [Field.CURRENCY_A]: calculateSlippageAmount(parsedAmountA, noLiquidity ? ZERO_PERCENT : allowedSlippage)[0],\r\n      [Field.CURRENCY_B]: calculateSlippageAmount(parsedAmountB, noLiquidity ? ZERO_PERCENT : allowedSlippage)[0],\r\n    }\r\n\r\n    let estimate,\r\n      method: (...args: any) => Promise<TransactionResponse>,\r\n      args: Array<string | string[] | number>,\r\n      value: BigNumber | null\r\n    if (currencyA.isNative || currencyB.isNative) {\r\n      const tokenBIsETH = currencyB.isNative\r\n      estimate = router.estimateGas.addLiquidityETH\r\n      method = router.addLiquidityETH\r\n      args = [\r\n        (tokenBIsETH ? currencyA : currencyB)?.wrapped?.address ?? '', // token\r\n        (tokenBIsETH ? parsedAmountA : parsedAmountB).quotient.toString(), // token desired\r\n        amountsMin[tokenBIsETH ? Field.CURRENCY_A : Field.CURRENCY_B].toString(), // token min\r\n        amountsMin[tokenBIsETH ? Field.CURRENCY_B : Field.CURRENCY_A].toString(), // eth min\r\n        account,\r\n        deadline.toHexString(),\r\n      ]\r\n      value = BigNumber.from((tokenBIsETH ? parsedAmountB : parsedAmountA).quotient.toString())\r\n    } else {\r\n      estimate = router.estimateGas.addLiquidity\r\n      method = router.addLiquidity\r\n      args = [\r\n        currencyA?.wrapped?.address ?? '',\r\n        currencyB?.wrapped?.address ?? '',\r\n        parsedAmountA.quotient.toString(),\r\n        parsedAmountB.quotient.toString(),\r\n        amountsMin[Field.CURRENCY_A].toString(),\r\n        amountsMin[Field.CURRENCY_B].toString(),\r\n        account,\r\n        deadline.toHexString(),\r\n      ]\r\n      value = null\r\n    }\r\n\r\n    setAttemptingTxn(true)\r\n    await estimate(...args, value ? { value } : {})\r\n      .then((estimatedGasLimit) =>\r\n        method(...args, {\r\n          ...(value ? { value } : {}),\r\n          gasLimit: calculateGasMargin(estimatedGasLimit),\r\n        }).then((response) => {\r\n          setAttemptingTxn(false)\r\n\r\n          const transactionInfo: TransactionInfo = {\r\n            type: TransactionType.ADD_LIQUIDITY_V2_POOL,\r\n            baseCurrencyId: currencyId(currencyA),\r\n            expectedAmountBaseRaw: parsedAmounts[Field.CURRENCY_A]?.quotient.toString() ?? '0',\r\n            quoteCurrencyId: currencyId(currencyB),\r\n            expectedAmountQuoteRaw: parsedAmounts[Field.CURRENCY_B]?.quotient.toString() ?? '0',\r\n          }\r\n\r\n          addTransaction(response, transactionInfo)\r\n\r\n          setTxHash(response.hash)\r\n\r\n          sendAnalyticsEvent(LiquidityEventName.ADD_LIQUIDITY_SUBMITTED, {\r\n            label: [currencies[Field.CURRENCY_A]?.symbol, currencies[Field.CURRENCY_B]?.symbol].join('/'),\r\n            ...trace,\r\n            ...transactionInfo,\r\n          })\r\n        })\r\n      )\r\n      .catch((error) => {\r\n        setAttemptingTxn(false)\r\n        // we only care if the error is something _other_ than the user rejected the tx\r\n        if (error?.code !== 4001) {\r\n          console.error(error)\r\n        }\r\n      })\r\n  }\r\n\r\n  const modalHeader = () => {\r\n    return (\r\n      <AddLiquidityHeaderContainer>\r\n        {noLiquidity ? (\r\n          <LightCard mt=\"20px\" $borderRadius=\"20px\">\r\n            <AutoRow justify=\"space-between\">\r\n              <Text fontSize=\"24px\" fontWeight={535} lineHeight=\"42px\" marginRight={10}>\r\n                {currencies[Field.CURRENCY_A]?.symbol + '/' + currencies[Field.CURRENCY_B]?.symbol}\r\n              </Text>\r\n              <DoubleCurrencyLogo\r\n                currency0={currencies[Field.CURRENCY_A]}\r\n                currency1={currencies[Field.CURRENCY_B]}\r\n                size={30}\r\n              />\r\n            </AutoRow>\r\n          </LightCard>\r\n        ) : (\r\n          <>\r\n            <RowFlat style={{ marginTop: '20px' }}>\r\n              <Text fontSize=\"48px\" fontWeight={535} lineHeight=\"42px\" marginRight={10}>\r\n                {liquidityMinted?.toSignificant(6)}\r\n              </Text>\r\n              <DoubleCurrencyLogo\r\n                currency0={currencies[Field.CURRENCY_A]}\r\n                currency1={currencies[Field.CURRENCY_B]}\r\n                size={30}\r\n              />\r\n            </RowFlat>\r\n            <Row>\r\n              <Text fontSize=\"24px\">\r\n                {currencies[Field.CURRENCY_A]?.symbol + '/' + currencies[Field.CURRENCY_B]?.symbol + ' Pool Tokens'}\r\n              </Text>\r\n            </Row>\r\n            <ThemedText.DeprecatedItalic fontSize={12} textAlign=\"left\" padding=\"8px 0 0 0 \">\r\n              <Trans>\r\n                Output is estimated. If the price changes by more than {allowedSlippage.toSignificant(4)}% your\r\n                transaction will revert.\r\n              </Trans>\r\n            </ThemedText.DeprecatedItalic>\r\n          </>\r\n        )}\r\n      </AddLiquidityHeaderContainer>\r\n    )\r\n  }\r\n\r\n  const modalBottom = () => {\r\n    return (\r\n      <ConfirmAddModalBottom\r\n        price={price}\r\n        currencies={currencies}\r\n        parsedAmounts={parsedAmounts}\r\n        noLiquidity={noLiquidity}\r\n        onAdd={onAdd}\r\n        poolTokenPercentage={poolTokenPercentage}\r\n      />\r\n    )\r\n  }\r\n\r\n  const pendingText = (\r\n    <Trans>\r\n      Supplying {parsedAmounts[Field.CURRENCY_A]?.toSignificant(6)} {currencies[Field.CURRENCY_A]?.symbol} and{' '}\r\n      {parsedAmounts[Field.CURRENCY_B]?.toSignificant(6)} {currencies[Field.CURRENCY_B]?.symbol}\r\n    </Trans>\r\n  )\r\n\r\n  const handleCurrencyASelect = useCallback(\r\n    (currencyA: Currency) => {\r\n      const newCurrencyIdA = currencyId(currencyA)\r\n      if (newCurrencyIdA === currencyIdB) {\r\n        navigate(`/add/v2/${currencyIdB}/${currencyIdA}`)\r\n      } else {\r\n        navigate(`/add/v2/${newCurrencyIdA}/${currencyIdB}`)\r\n      }\r\n    },\r\n    [currencyIdB, navigate, currencyIdA]\r\n  )\r\n  const handleCurrencyBSelect = useCallback(\r\n    (currencyB: Currency) => {\r\n      const newCurrencyIdB = currencyId(currencyB)\r\n      if (currencyIdA === newCurrencyIdB) {\r\n        if (currencyIdB) {\r\n          navigate(`/add/v2/${currencyIdB}/${newCurrencyIdB}`)\r\n        } else {\r\n          navigate(`/add/v2/${newCurrencyIdB}`)\r\n        }\r\n      } else {\r\n        navigate(`/add/v2/${currencyIdA ? currencyIdA : 'ETH'}/${newCurrencyIdB}`)\r\n      }\r\n    },\r\n    [currencyIdA, navigate, currencyIdB]\r\n  )\r\n\r\n  const handleDismissConfirmation = useCallback(() => {\r\n    setShowConfirm(false)\r\n    // if there was a tx hash, we want to clear the input\r\n    if (txHash) {\r\n      onFieldAInput('')\r\n    }\r\n    setTxHash('')\r\n  }, [onFieldAInput, txHash])\r\n\r\n  const { pathname } = useLocation()\r\n  const isCreate = pathname.includes('/create')\r\n\r\n  const addIsUnsupported = useIsSwapUnsupported(currencies?.CURRENCY_A, currencies?.CURRENCY_B)\r\n\r\n  if (!networkSupportsV2) return <V2Unsupported />\r\n\r\n  return (\r\n    <>\r\n      <AppBody>\r\n        <AddRemoveTabs creating={isCreate} adding={true} autoSlippage={DEFAULT_ADD_V2_SLIPPAGE_TOLERANCE} />\r\n        <Wrapper>\r\n          <TransactionConfirmationModal\r\n            isOpen={showConfirm}\r\n            onDismiss={handleDismissConfirmation}\r\n            attemptingTxn={attemptingTxn}\r\n            hash={txHash}\r\n            reviewContent={() => (\r\n              <ConfirmationModalContent\r\n                title={noLiquidity ? <Trans>You are creating a pool</Trans> : <Trans>You will receive</Trans>}\r\n                onDismiss={handleDismissConfirmation}\r\n                topContent={modalHeader}\r\n                bottomContent={modalBottom}\r\n              />\r\n            )}\r\n            pendingText={pendingText}\r\n            currencyToAdd={pair?.liquidityToken}\r\n          />\r\n          <AutoColumn gap=\"20px\">\r\n            {noLiquidity ||\r\n              (isCreate ? (\r\n                <ColumnCenter>\r\n                  <BlueCard>\r\n                    <AutoColumn gap=\"10px\">\r\n                      <ThemedText.DeprecatedLink fontWeight={535} color=\"accent1\">\r\n                        <Trans>You are the first liquidity provider.</Trans>\r\n                      </ThemedText.DeprecatedLink>\r\n                      <ThemedText.DeprecatedLink fontWeight={485} color=\"accent1\">\r\n                        <Trans>The ratio of tokens you add will set the price of this pool.</Trans>\r\n                      </ThemedText.DeprecatedLink>\r\n                      <ThemedText.DeprecatedLink fontWeight={485} color=\"accent1\">\r\n                        <Trans>Once you are happy with the rate click supply to review.</Trans>\r\n                      </ThemedText.DeprecatedLink>\r\n                    </AutoColumn>\r\n                  </BlueCard>\r\n                </ColumnCenter>\r\n              ) : (\r\n                <ColumnCenter>\r\n                  <BlueCard>\r\n                    <AutoColumn gap=\"10px\">\r\n                      <ThemedText.DeprecatedLink fontWeight={485} color=\"accent1\">\r\n                        <b>\r\n                          <Trans>Tip:</Trans>\r\n                        </b>{' '}\r\n                        <Trans>\r\n                          When you add liquidity, you will receive pool tokens representing your position. These tokens\r\n                          automatically earn fees proportional to your share of the pool, and can be redeemed at any\r\n                          time.\r\n                        </Trans>\r\n                      </ThemedText.DeprecatedLink>\r\n                    </AutoColumn>\r\n                  </BlueCard>\r\n                </ColumnCenter>\r\n              ))}\r\n            <CurrencyInputPanel\r\n              value={formattedAmounts[Field.CURRENCY_A]}\r\n              onUserInput={onFieldAInput}\r\n              onMax={() => {\r\n                onFieldAInput(maxAmounts[Field.CURRENCY_A]?.toExact() ?? '')\r\n              }}\r\n              onCurrencySelect={handleCurrencyASelect}\r\n              showMaxButton={!atMaxAmounts[Field.CURRENCY_A]}\r\n              currency={currencies[Field.CURRENCY_A] ?? null}\r\n              id=\"add-liquidity-input-tokena\"\r\n              showCommonBases\r\n            />\r\n            <ColumnCenter>\r\n              <Plus size=\"16\" color={theme.neutral2} />\r\n            </ColumnCenter>\r\n            <CurrencyInputPanel\r\n              value={formattedAmounts[Field.CURRENCY_B]}\r\n              onUserInput={onFieldBInput}\r\n              onCurrencySelect={handleCurrencyBSelect}\r\n              onMax={() => {\r\n                onFieldBInput(maxAmounts[Field.CURRENCY_B]?.toExact() ?? '')\r\n              }}\r\n              showMaxButton={!atMaxAmounts[Field.CURRENCY_B]}\r\n              currency={currencies[Field.CURRENCY_B] ?? null}\r\n              id=\"add-liquidity-input-tokenb\"\r\n              showCommonBases\r\n            />\r\n            {currencies[Field.CURRENCY_A] && currencies[Field.CURRENCY_B] && pairState !== PairState.INVALID && (\r\n              <>\r\n                <LightCard padding=\"0px\" $borderRadius=\"20px\">\r\n                  <RowBetween padding=\"1rem\">\r\n                    <ThemedText.DeprecatedSubHeader fontWeight={535} fontSize={14}>\r\n                      {noLiquidity ? (\r\n                        <Trans>Initial prices and pool share</Trans>\r\n                      ) : (\r\n                        <Trans>Prices and pool share</Trans>\r\n                      )}\r\n                    </ThemedText.DeprecatedSubHeader>\r\n                  </RowBetween>{' '}\r\n                  <LightCard padding=\"1rem\" $borderRadius=\"20px\">\r\n                    <PoolPriceBar\r\n                      currencies={currencies}\r\n                      poolTokenPercentage={poolTokenPercentage}\r\n                      noLiquidity={noLiquidity}\r\n                      price={price}\r\n                    />\r\n                  </LightCard>\r\n                </LightCard>\r\n              </>\r\n            )}\r\n\r\n            {addIsUnsupported ? (\r\n              <ButtonPrimary disabled={true}>\r\n                <ThemedText.DeprecatedMain mb=\"4px\">\r\n                  <Trans>Unsupported asset</Trans>\r\n                </ThemedText.DeprecatedMain>\r\n              </ButtonPrimary>\r\n            ) : !account ? (\r\n              <TraceEvent\r\n                events={[BrowserEvent.onClick]}\r\n                name={InterfaceEventName.CONNECT_WALLET_BUTTON_CLICKED}\r\n                properties={{ received_swap_quote: false }}\r\n                element={InterfaceElementName.CONNECT_WALLET_BUTTON}\r\n              >\r\n                <ButtonLight onClick={toggleWalletDrawer}>\r\n                  <Trans>Connect wallet</Trans>\r\n                </ButtonLight>\r\n              </TraceEvent>\r\n            ) : (\r\n              <AutoColumn gap=\"md\">\r\n                {(approvalA === ApprovalState.NOT_APPROVED ||\r\n                  approvalA === ApprovalState.PENDING ||\r\n                  approvalB === ApprovalState.NOT_APPROVED ||\r\n                  approvalB === ApprovalState.PENDING) &&\r\n                  isValid && (\r\n                    <RowBetween>\r\n                      {approvalA !== ApprovalState.APPROVED && (\r\n                        <ButtonPrimary\r\n                          onClick={approveACallback}\r\n                          disabled={approvalA === ApprovalState.PENDING}\r\n                          width={approvalB !== ApprovalState.APPROVED ? '48%' : '100%'}\r\n                        >\r\n                          {approvalA === ApprovalState.PENDING ? (\r\n                            <Dots>\r\n                              <Trans>Approving {currencies[Field.CURRENCY_A]?.symbol}</Trans>\r\n                            </Dots>\r\n                          ) : (\r\n                            <Trans>Approve {currencies[Field.CURRENCY_A]?.symbol}</Trans>\r\n                          )}\r\n                        </ButtonPrimary>\r\n                      )}\r\n                      {approvalB !== ApprovalState.APPROVED && (\r\n                        <ButtonPrimary\r\n                          onClick={approveBCallback}\r\n                          disabled={approvalB === ApprovalState.PENDING}\r\n                          width={approvalA !== ApprovalState.APPROVED ? '48%' : '100%'}\r\n                        >\r\n                          {approvalB === ApprovalState.PENDING ? (\r\n                            <Dots>\r\n                              <Trans>Approving {currencies[Field.CURRENCY_B]?.symbol}</Trans>\r\n                            </Dots>\r\n                          ) : (\r\n                            <Trans>Approve {currencies[Field.CURRENCY_B]?.symbol}</Trans>\r\n                          )}\r\n                        </ButtonPrimary>\r\n                      )}\r\n                    </RowBetween>\r\n                  )}\r\n                <ButtonError\r\n                  onClick={() => {\r\n                    setShowConfirm(true)\r\n                  }}\r\n                  disabled={!isValid || approvalA !== ApprovalState.APPROVED || approvalB !== ApprovalState.APPROVED}\r\n                  error={!isValid && !!parsedAmounts[Field.CURRENCY_A] && !!parsedAmounts[Field.CURRENCY_B]}\r\n                >\r\n                  <Text fontSize={20} fontWeight={535}>\r\n                    {error ?? <Trans>Supply</Trans>}\r\n                  </Text>\r\n                </ButtonError>\r\n              </AutoColumn>\r\n            )}\r\n          </AutoColumn>\r\n        </Wrapper>\r\n      </AppBody>\r\n      <SwitchLocaleLink />\r\n\r\n      {!addIsUnsupported ? (\r\n        pair && !noLiquidity && pairState !== PairState.INVALID ? (\r\n          <AutoColumn style={{ minWidth: '20rem', width: '100%', maxWidth: '400px', marginTop: '1rem' }}>\r\n            <MinimalPositionCard showUnwrapped={oneCurrencyIsWETH} pair={pair} />\r\n          </AutoColumn>\r\n        ) : null\r\n      ) : (\r\n        <UnsupportedCurrencyFooter\r\n          show={addIsUnsupported}\r\n          currencies={[currencies.CURRENCY_A, currencies.CURRENCY_B]}\r\n        />\r\n      )}\r\n    </>\r\n  )\r\n}\r\n","import { Navigate, useParams } from 'react-router-dom'\r\n\r\nimport AddLiquidityV2 from './index'\r\n\r\nexport default function RedirectDuplicateTokenIdsV2() {\r\n  const { currencyIdA, currencyIdB } = useParams<{ currencyIdA: string; currencyIdB: string }>()\r\n\r\n  if (currencyIdA && currencyIdB && currencyIdA.toLowerCase() === currencyIdB.toLowerCase()) {\r\n    return <Navigate to={`/add/v2/${currencyIdA}`} replace />\r\n  }\r\n\r\n  return <AddLiquidityV2 />\r\n}\r\n","import { PropsWithChildren } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Z_INDEX } from 'theme/zIndex'\r\n\r\ninterface BodyWrapperProps {\r\n  $margin?: string\r\n  $maxWidth?: string\r\n}\r\n\r\nexport const BodyWrapper = styled.main<BodyWrapperProps>`\r\n  position: relative;\r\n  margin-top: ${({ $margin }) => $margin ?? '0px'};\r\n  max-width: ${({ $maxWidth }) => $maxWidth ?? '420px'};\r\n  width: 100%;\r\n  background: ${({ theme }) => theme.surface1};\r\n  border-radius: 16px;\r\n  border: 1px solid ${({ theme }) => theme.surface3};\r\n  margin-top: 1rem;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  z-index: ${Z_INDEX.default};\r\n`\r\n\r\n/**\r\n * The styled container element that wraps the content of most pages and the tabs.\r\n */\r\nexport default function AppBody(props: PropsWithChildren<BodyWrapperProps>) {\r\n  return <BodyWrapper {...props} />\r\n}\r\n","import { LoadingRows as BaseLoadingRows } from 'components/Loader/styled'\r\nimport { Text } from 'rebass'\r\nimport styled from 'styled-components'\r\n\r\nexport const Wrapper = styled.div`\r\n  position: relative;\r\n  padding: 20px;\r\n`\r\n\r\nexport const ClickableText = styled(Text)`\r\n  :hover {\r\n    cursor: pointer;\r\n  }\r\n  color: ${({ theme }) => theme.accent1};\r\n`\r\nexport const MaxButton = styled.button<{ width: string }>`\r\n  padding: 0.5rem 1rem;\r\n  background-color: ${({ theme }) => theme.accent2};\r\n  border: 1px solid ${({ theme }) => theme.accent2};\r\n  border-radius: 0.5rem;\r\n  font-size: 1rem;\r\n  ${({ theme }) => theme.deprecated_mediaWidth.deprecated_upToSmall`\r\n    padding: 0.25rem 0.5rem;\r\n  `};\r\n  font-weight: 535;\r\n  cursor: pointer;\r\n  margin: 0.25rem;\r\n  overflow: hidden;\r\n  color: ${({ theme }) => theme.accent1};\r\n  :hover {\r\n    border: 1px solid ${({ theme }) => theme.accent1};\r\n  }\r\n  :focus {\r\n    border: 1px solid ${({ theme }) => theme.accent1};\r\n    outline: none;\r\n  }\r\n`\r\n\r\nexport const Dots = styled.span`\r\n  &::after {\r\n    display: inline-block;\r\n    animation: ellipsis 1.25s infinite;\r\n    content: '.';\r\n    width: 1em;\r\n    text-align: left;\r\n  }\r\n  @keyframes ellipsis {\r\n    0% {\r\n      content: '.';\r\n    }\r\n    33% {\r\n      content: '..';\r\n    }\r\n    66% {\r\n      content: '...';\r\n    }\r\n  }\r\n`\r\n\r\nexport const LoadingRows = styled(BaseLoadingRows)`\r\n  padding-top: 36px;\r\n  min-width: 75%;\r\n  max-width: 960px;\r\n  grid-column-gap: 0.5em;\r\n  grid-row-gap: 0.8em;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  padding: 8px;\r\n\r\n  & > div:nth-child(4n + 1) {\r\n    grid-column: 1 / 3;\r\n  }\r\n  & > div:nth-child(4n) {\r\n    grid-column: 3 / 4;\r\n    margin-bottom: 2em;\r\n  }\r\n`\r\n","import { Currency, CurrencyAmount, Fraction, Percent } from '@uniswap/sdk-core'\r\nimport JSBI from 'jsbi'\r\n\r\nconst ONE = new Fraction(1, 1)\r\n\r\nexport function calculateSlippageAmount(value: CurrencyAmount<Currency>, slippage: Percent): [JSBI, JSBI] {\r\n  if (slippage.lessThan(0) || slippage.greaterThan(ONE)) throw new Error('Unexpected slippage')\r\n  return [value.multiply(ONE.subtract(slippage)).quotient, value.multiply(ONE.add(slippage)).quotient]\r\n}\r\n","import { Currency } from '@uniswap/sdk-core'\r\nimport { asSupportedChain } from 'constants/chains'\r\n\r\nimport { nativeOnChain, WRAPPED_NATIVE_CURRENCY } from '../constants/tokens'\r\n\r\nexport function unwrappedToken(currency: Currency): Currency {\r\n  if (currency.isNative) return currency\r\n  const formattedChainId = asSupportedChain(currency.chainId)\r\n  if (formattedChainId && WRAPPED_NATIVE_CURRENCY[formattedChainId]?.equals(currency))\r\n    return nativeOnChain(currency.chainId)\r\n  return currency\r\n}\r\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nvar Plus = forwardRef(function (_ref, ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"size\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size,\n    height: size,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: color,\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }, rest), /*#__PURE__*/React.createElement(\"line\", {\n    x1: \"12\",\n    y1: \"5\",\n    x2: \"12\",\n    y2: \"19\"\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    x1: \"5\",\n    y1: \"12\",\n    x2: \"19\",\n    y2: \"12\"\n  }));\n});\nPlus.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nPlus.displayName = 'Plus';\nexport default Plus;"],"names":["useApproval","amountToApprove","spender","useIsPendingApproval","chainId","useWeb3React","token","currency","isToken","undefined","approvalState","account","tokenAllowance","useTokenAllowance","pendingApproval","useMemo","isNative","ApprovalState","APPROVED","lessThan","PENDING","NOT_APPROVED","UNKNOWN","useApprovalStateForSpender","tokenContract","useTokenContract","address","approve","useCallback","async","logFailure","error","console","warn","symbol","useExact","estimatedGas","estimateGas","MaxUint256","catch","quotient","toString","gasLimit","calculateGasMargin","then","response","eventProperties","chain_id","token_symbol","token_address","getTokenAddress","sendAnalyticsEvent","InterfaceEventName","APPROVE_TOKEN_TXN_SUBMITTED","tokenAddress","spenderAddress","amount","useGetAndTrackApproval","getApproval","addTransaction","useTransactionAdder","pending","type","TransactionType","APPROVAL","useApproveCallback","approval","useHasPendingApproval","ZERO","JSBI","useMintState","useAppSelector","state","mint","ConfirmAddModalBottom","noLiquidity","price","currencies","parsedAmounts","poolTokenPercentage","onAdd","RowBetween","ThemedText","DeprecatedBody","Field","CURRENCY_A","RowFixed","CurrencyLogo","style","marginRight","toSignificant","CURRENCY_B","justifyContent","invert","ButtonPrimary","margin","onClick","Text","fontWeight","fontSize","PoolPriceBar","theme","useTheme","invertedPrice","AutoColumn","gap","AutoRow","justify","DeprecatedBlack","data-testid","color","neutral2","pt","ONE_BIPS","toFixed","DEFAULT_ADD_V2_SLIPPAGE_TOLERANCE","Percent","AddLiquidityHeaderContainer","styled","AddLiquidity","currencyIdA","currencyIdB","useParams","navigate","useNavigate","provider","trace","useTrace","currencyA","useCurrency","currencyB","wrappedNativeCurrency","WRAPPED_NATIVE_CURRENCY","oneCurrencyIsWETH","Boolean","equals","toggleWalletDrawer","useToggleAccountDrawer","independentField","typedValue","otherTypedValue","dependentField","pair","pairState","currencyBalances","liquidityMinted","useV2Pair","totalSupply","useTotalSupply","liquidityToken","PairState","NOT_EXISTS","EXISTS","reserve0","reserve1","balances","useCurrencyBalances","independentAmount","tryParseCurrencyAmount","dependentAmount","wrappedIndependentAmount","wrapped","tokenA","tokenB","dependentCurrency","dependentTokenAmount","priceOf","quote","CurrencyAmount","fromRawAmount","wrappedCurrencyA","currencyAAmount","currencyBAmount","greaterThan","value","divide","Price","denominator","numerator","tokenAmountA","tokenAmountB","getLiquidityMinted","add","INVALID","useDerivedMintInfo","onFieldAInput","onFieldBInput","dispatch","useAppDispatch","typeInput","field","useMintActionHandlers","isValid","showConfirm","setShowConfirm","useState","attemptingTxn","setAttemptingTxn","deadline","useTransactionDeadline","allowedSlippage","useUserSlippageToleranceWithDefault","txHash","setTxHash","formattedAmounts","maxAmounts","reduce","accumulator","maxAmountSpend","atMaxAmounts","equalTo","router","useV2RouterContract","approvalA","approveACallback","approvalB","approveBCallback","networkSupportsV2","useNetworkSupportsV2","parsedAmountA","parsedAmountB","amountsMin","calculateSlippageAmount","ZERO_PERCENT","estimate","method","args","tokenBIsETH","addLiquidityETH","toHexString","BigNumber","from","addLiquidity","estimatedGasLimit","transactionInfo","ADD_LIQUIDITY_V2_POOL","baseCurrencyId","currencyId","expectedAmountBaseRaw","quoteCurrencyId","expectedAmountQuoteRaw","hash","LiquidityEventName","ADD_LIQUIDITY_SUBMITTED","label","join","code","modalHeader","LightCard","mt","$borderRadius","lineHeight","DoubleCurrencyLogo","currency0","currency1","size","RowFlat","marginTop","Row","DeprecatedItalic","textAlign","padding","modalBottom","pendingText","handleCurrencyASelect","newCurrencyIdA","handleCurrencyBSelect","newCurrencyIdB","handleDismissConfirmation","pathname","useLocation","isCreate","includes","addIsUnsupported","useIsSwapUnsupported","AppBody","AddRemoveTabs","creating","adding","autoSlippage","Wrapper","TransactionConfirmationModal","isOpen","onDismiss","reviewContent","ConfirmationModalContent","title","topContent","bottomContent","currencyToAdd","ColumnCenter","BlueCard","DeprecatedLink","b","CurrencyInputPanel","onUserInput","onMax","toExact","onCurrencySelect","showMaxButton","id","showCommonBases","Plus","DeprecatedSubHeader","disabled","DeprecatedMain","mb","width","Dots","ButtonError","TraceEvent","events","BrowserEvent","name","CONNECT_WALLET_BUTTON_CLICKED","properties","received_swap_quote","element","InterfaceElementName","CONNECT_WALLET_BUTTON","ButtonLight","SwitchLocaleLink","UnsupportedCurrencyFooter","show","minWidth","maxWidth","MinimalPositionCard","showUnwrapped","V2Unsupported","RedirectDuplicateTokenIdsV2","toLowerCase","Navigate","to","replace","AddLiquidityV2","BodyWrapper","main","$margin","$maxWidth","surface1","surface3","Z_INDEX","default","props","div","ClickableText","accent1","MaxButton","button","accent2","deprecated_mediaWidth","deprecated_upToSmall","span","LoadingRows","BaseLoadingRows","ONE","Fraction","slippage","Error","multiply","subtract","unwrappedToken","formattedChainId","asSupportedChain","nativeOnChain","_extends"],"sourceRoot":""}