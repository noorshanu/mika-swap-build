{"version":3,"file":"static/js/2476.3f5369df.chunk.js","mappings":"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","sources":["state/stake/hooks.tsx","pages/Pool/v2.tsx","utils/unwrappedToken.ts"],"sourcesContent":["import { Interface } from '@ethersproject/abi'\r\nimport StakingRewardsJSON from '@uniswap/liquidity-staker/build/StakingRewards.json'\r\nimport { ChainId, CurrencyAmount, Token } from '@uniswap/sdk-core'\r\nimport { Pair } from '@uniswap/v2-sdk'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport useCurrentBlockTimestamp from 'hooks/useCurrentBlockTimestamp'\r\nimport JSBI from 'jsbi'\r\nimport { NEVER_RELOAD, useMultipleContractSingleData } from 'lib/hooks/multicall'\r\nimport { useMemo } from 'react'\r\n\r\nimport { DAI, UNI, USDC_MAINNET, USDT, WBTC, WRAPPED_NATIVE_CURRENCY } from '../../constants/tokens'\r\n\r\nconst STAKING_REWARDS_INTERFACE = new Interface(StakingRewardsJSON.abi)\r\n\r\nexport const STAKING_GENESIS = 1600387200\r\n\r\nconst STAKING_REWARDS_INFO: {\r\n  [chainId: number]: {\r\n    tokens: [Token, Token]\r\n    stakingRewardAddress: string\r\n  }[]\r\n} = {\r\n  1: [\r\n    {\r\n      tokens: [WRAPPED_NATIVE_CURRENCY[ChainId.MAINNET] as Token, DAI],\r\n      stakingRewardAddress: '0xa1484C3aa22a66C62b77E0AE78E15258bd0cB711',\r\n    },\r\n    {\r\n      tokens: [WRAPPED_NATIVE_CURRENCY[ChainId.MAINNET] as Token, USDC_MAINNET],\r\n      stakingRewardAddress: '0x7FBa4B8Dc5E7616e59622806932DBea72537A56b',\r\n    },\r\n    {\r\n      tokens: [WRAPPED_NATIVE_CURRENCY[ChainId.MAINNET] as Token, USDT],\r\n      stakingRewardAddress: '0x6C3e4cb2E96B01F4b866965A91ed4437839A121a',\r\n    },\r\n    {\r\n      tokens: [WRAPPED_NATIVE_CURRENCY[ChainId.MAINNET] as Token, WBTC],\r\n      stakingRewardAddress: '0xCA35e32e7926b96A9988f61d510E038108d8068e',\r\n    },\r\n  ],\r\n}\r\n\r\ninterface StakingInfo {\r\n  // the address of the reward contract\r\n  stakingRewardAddress: string\r\n  // the tokens involved in this pair\r\n  tokens: [Token, Token]\r\n  // the amount of token currently staked, or undefined if no account\r\n  stakedAmount: CurrencyAmount<Token>\r\n  // the amount of reward token earned by the active account, or undefined if no account\r\n  earnedAmount: CurrencyAmount<Token>\r\n  // the total amount of token staked in the contract\r\n  totalStakedAmount: CurrencyAmount<Token>\r\n  // the amount of token distributed per second to all LPs, constant\r\n  totalRewardRate: CurrencyAmount<Token>\r\n  // the current amount of token distributed to the active account per second.\r\n  // equivalent to percent of total supply * reward rate\r\n  rewardRate: CurrencyAmount<Token>\r\n  // when the period ends\r\n  periodFinish?: Date\r\n  // if pool is active\r\n  active: boolean\r\n  // calculates a hypothetical amount of token distributed to the active account per second.\r\n  getHypotheticalRewardRate: (\r\n    stakedAmount: CurrencyAmount<Token>,\r\n    totalStakedAmount: CurrencyAmount<Token>,\r\n    totalRewardRate: CurrencyAmount<Token>\r\n  ) => CurrencyAmount<Token>\r\n}\r\n\r\n// gets the staking info from the network for the active chain id\r\nexport function useStakingInfo(pairToFilterBy?: Pair | null): StakingInfo[] {\r\n  const { chainId, account } = useWeb3React()\r\n\r\n  // detect if staking is ended\r\n  const currentBlockTimestamp = useCurrentBlockTimestamp()\r\n\r\n  const info = useMemo(\r\n    () =>\r\n      chainId\r\n        ? STAKING_REWARDS_INFO[chainId]?.filter((stakingRewardInfo) =>\r\n            pairToFilterBy === undefined\r\n              ? true\r\n              : pairToFilterBy === null\r\n              ? false\r\n              : pairToFilterBy.involvesToken(stakingRewardInfo.tokens[0]) &&\r\n                pairToFilterBy.involvesToken(stakingRewardInfo.tokens[1])\r\n          ) ?? []\r\n        : [],\r\n    [chainId, pairToFilterBy]\r\n  )\r\n\r\n  const uni = chainId ? UNI[chainId] : undefined\r\n\r\n  const rewardsAddresses = useMemo(() => info.map(({ stakingRewardAddress }) => stakingRewardAddress), [info])\r\n\r\n  const accountArg = useMemo(() => [account ?? undefined], [account])\r\n\r\n  // get all the info from the staking rewards contracts\r\n  const balances = useMultipleContractSingleData(rewardsAddresses, STAKING_REWARDS_INTERFACE, 'balanceOf', accountArg)\r\n  const earnedAmounts = useMultipleContractSingleData(rewardsAddresses, STAKING_REWARDS_INTERFACE, 'earned', accountArg)\r\n  const totalSupplies = useMultipleContractSingleData(rewardsAddresses, STAKING_REWARDS_INTERFACE, 'totalSupply')\r\n\r\n  // tokens per second, constants\r\n  const rewardRates = useMultipleContractSingleData(\r\n    rewardsAddresses,\r\n    STAKING_REWARDS_INTERFACE,\r\n    'rewardRate',\r\n    undefined,\r\n    NEVER_RELOAD\r\n  )\r\n  const periodFinishes = useMultipleContractSingleData(\r\n    rewardsAddresses,\r\n    STAKING_REWARDS_INTERFACE,\r\n    'periodFinish',\r\n    undefined,\r\n    NEVER_RELOAD\r\n  )\r\n\r\n  return useMemo(() => {\r\n    if (!chainId || !uni) return []\r\n\r\n    return rewardsAddresses.reduce<StakingInfo[]>((memo, rewardsAddress, index) => {\r\n      // these two are dependent on account\r\n      const balanceState = balances[index]\r\n      const earnedAmountState = earnedAmounts[index]\r\n\r\n      // these get fetched regardless of account\r\n      const totalSupplyState = totalSupplies[index]\r\n      const rewardRateState = rewardRates[index]\r\n      const periodFinishState = periodFinishes[index]\r\n\r\n      if (\r\n        // these may be undefined if not logged in\r\n        !balanceState?.loading &&\r\n        !earnedAmountState?.loading &&\r\n        // always need these\r\n        totalSupplyState &&\r\n        !totalSupplyState.loading &&\r\n        rewardRateState &&\r\n        !rewardRateState.loading &&\r\n        periodFinishState &&\r\n        !periodFinishState.loading\r\n      ) {\r\n        if (\r\n          balanceState?.error ||\r\n          earnedAmountState?.error ||\r\n          totalSupplyState.error ||\r\n          rewardRateState.error ||\r\n          periodFinishState.error\r\n        ) {\r\n          console.error('Failed to load staking rewards info')\r\n          return memo\r\n        }\r\n\r\n        // get the LP token\r\n        const tokens = info[index].tokens\r\n        const dummyPair = new Pair(\r\n          CurrencyAmount.fromRawAmount(tokens[0], '0'),\r\n          CurrencyAmount.fromRawAmount(tokens[1], '0')\r\n        )\r\n\r\n        // check for account, if no account set to 0\r\n\r\n        const stakedAmount = CurrencyAmount.fromRawAmount(\r\n          dummyPair.liquidityToken,\r\n          JSBI.BigInt(balanceState?.result?.[0] ?? 0)\r\n        )\r\n        const totalStakedAmount = CurrencyAmount.fromRawAmount(\r\n          dummyPair.liquidityToken,\r\n          JSBI.BigInt(totalSupplyState.result?.[0])\r\n        )\r\n        const totalRewardRate = CurrencyAmount.fromRawAmount(uni, JSBI.BigInt(rewardRateState.result?.[0]))\r\n\r\n        const getHypotheticalRewardRate = (\r\n          stakedAmount: CurrencyAmount<Token>,\r\n          totalStakedAmount: CurrencyAmount<Token>,\r\n          totalRewardRate: CurrencyAmount<Token>\r\n        ): CurrencyAmount<Token> => {\r\n          return CurrencyAmount.fromRawAmount(\r\n            uni,\r\n            JSBI.greaterThan(totalStakedAmount.quotient, JSBI.BigInt(0))\r\n              ? JSBI.divide(JSBI.multiply(totalRewardRate.quotient, stakedAmount.quotient), totalStakedAmount.quotient)\r\n              : JSBI.BigInt(0)\r\n          )\r\n        }\r\n\r\n        const individualRewardRate = getHypotheticalRewardRate(stakedAmount, totalStakedAmount, totalRewardRate)\r\n\r\n        const periodFinishSeconds = periodFinishState.result?.[0]?.toNumber()\r\n        const periodFinishMs = periodFinishSeconds * 1000\r\n\r\n        // compare period end timestamp vs current block timestamp (in seconds)\r\n        const active =\r\n          periodFinishSeconds && currentBlockTimestamp ? periodFinishSeconds > currentBlockTimestamp.toNumber() : true\r\n\r\n        memo.push({\r\n          stakingRewardAddress: rewardsAddress,\r\n          tokens: info[index].tokens,\r\n          periodFinish: periodFinishMs > 0 ? new Date(periodFinishMs) : undefined,\r\n          earnedAmount: CurrencyAmount.fromRawAmount(uni, JSBI.BigInt(earnedAmountState?.result?.[0] ?? 0)),\r\n          rewardRate: individualRewardRate,\r\n          totalRewardRate,\r\n          stakedAmount,\r\n          totalStakedAmount,\r\n          getHypotheticalRewardRate,\r\n          active,\r\n        })\r\n      }\r\n      return memo\r\n    }, [])\r\n  }, [\r\n    balances,\r\n    chainId,\r\n    currentBlockTimestamp,\r\n    earnedAmounts,\r\n    info,\r\n    periodFinishes,\r\n    rewardRates,\r\n    rewardsAddresses,\r\n    totalSupplies,\r\n    uni,\r\n  ])\r\n}\r\n","import { Trans } from '@lingui/macro'\r\nimport { InterfacePageName } from '@uniswap/analytics-events'\r\nimport { Pair } from '@uniswap/v2-sdk'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Trace } from 'analytics'\r\nimport { V2Unsupported } from 'components/V2Unsupported'\r\nimport { useNetworkSupportsV2 } from 'hooks/useNetworkSupportsV2'\r\nimport JSBI from 'jsbi'\r\nimport { useMemo } from 'react'\r\nimport { ChevronsRight } from 'react-feather'\r\nimport { Link } from 'react-router-dom'\r\nimport { Text } from 'rebass'\r\nimport styled, { useTheme } from 'styled-components'\r\nimport { ExternalLink, HideSmall, ThemedText } from 'theme/components'\r\n\r\nimport { ButtonOutlined, ButtonPrimary, ButtonSecondary } from '../../components/Button'\r\nimport Card from '../../components/Card'\r\nimport { AutoColumn } from '../../components/Column'\r\nimport { CardBGImage, CardNoise, CardSection, DataCard } from '../../components/earn/styled'\r\nimport FullPositionCard from '../../components/PositionCard'\r\nimport { RowBetween, RowFixed } from '../../components/Row'\r\nimport { Dots } from '../../components/swap/styled'\r\nimport { SwitchLocaleLink } from '../../components/SwitchLocaleLink'\r\nimport { BIG_INT_ZERO } from '../../constants/misc'\r\nimport { useV2Pairs } from '../../hooks/useV2Pairs'\r\nimport { useTokenBalancesWithLoadingIndicator } from '../../state/connection/hooks'\r\nimport { useStakingInfo } from '../../state/stake/hooks'\r\nimport { toV2LiquidityToken, useTrackedTokenPairs } from '../../state/user/hooks'\r\n\r\nconst PageWrapper = styled(AutoColumn)`\r\n  max-width: 640px;\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.deprecated_mediaWidth.deprecated_upToSmall`\r\n    padding: 0px 8px;\r\n  `};\r\n`\r\n\r\nconst LPFeeExplainer = styled(DataCard)`\r\n  background: radial-gradient(76.02% 75.41% at 1.84% 0%, #27ae60 0%, #000000 100%);\r\n  margin: 0 0 16px 0;\r\n  overflow: hidden;\r\n`\r\n\r\nconst TitleRow = styled(RowBetween)`\r\n  ${({ theme }) => theme.deprecated_mediaWidth.deprecated_upToSmall`\r\n    flex-wrap: wrap;\r\n    gap: 12px;\r\n    width: 100%;\r\n    flex-direction: column-reverse;\r\n  `};\r\n`\r\n\r\nconst ButtonRow = styled(RowFixed)`\r\n  gap: 8px;\r\n  ${({ theme }) => theme.deprecated_mediaWidth.deprecated_upToSmall`\r\n    width: 100%;\r\n    flex-direction: row-reverse;\r\n    justify-content: space-between;\r\n  `};\r\n`\r\n\r\nconst ResponsiveButtonPrimary = styled(ButtonPrimary)`\r\n  height: 40px;\r\n  width: fit-content;\r\n  border-radius: 12px;\r\n  ${({ theme }) => theme.deprecated_mediaWidth.deprecated_upToSmall`\r\n    width: 48%;\r\n  `};\r\n`\r\n\r\nconst ResponsiveButtonSecondary = styled(ButtonSecondary)`\r\n  height: 40px;\r\n  width: fit-content;\r\n  ${({ theme }) => theme.deprecated_mediaWidth.deprecated_upToSmall`\r\n    width: 48%;\r\n  `};\r\n`\r\n\r\nconst EmptyProposals = styled.div`\r\n  border: 1px solid ${({ theme }) => theme.neutral2};\r\n  padding: 16px 12px;\r\n  border-radius: 12px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nexport default function Pool() {\r\n  const theme = useTheme()\r\n  const { account } = useWeb3React()\r\n  const networkSupportsV2 = useNetworkSupportsV2()\r\n\r\n  // fetch the user's balances of all tracked V2 LP tokens\r\n  let trackedTokenPairs = useTrackedTokenPairs()\r\n  if (!networkSupportsV2) trackedTokenPairs = []\r\n  const tokenPairsWithLiquidityTokens = useMemo(\r\n    () => trackedTokenPairs.map((tokens) => ({ liquidityToken: toV2LiquidityToken(tokens), tokens })),\r\n    [trackedTokenPairs]\r\n  )\r\n  const liquidityTokens = useMemo(\r\n    () => tokenPairsWithLiquidityTokens.map((tpwlt) => tpwlt.liquidityToken),\r\n    [tokenPairsWithLiquidityTokens]\r\n  )\r\n  const [v2PairsBalances, fetchingV2PairBalances] = useTokenBalancesWithLoadingIndicator(\r\n    account ?? undefined,\r\n    liquidityTokens\r\n  )\r\n\r\n  // fetch the reserves for all V2 pools in which the user has a balance\r\n  const liquidityTokensWithBalances = useMemo(\r\n    () =>\r\n      tokenPairsWithLiquidityTokens.filter(({ liquidityToken }) =>\r\n        v2PairsBalances[liquidityToken.address]?.greaterThan('0')\r\n      ),\r\n    [tokenPairsWithLiquidityTokens, v2PairsBalances]\r\n  )\r\n\r\n  const v2Pairs = useV2Pairs(liquidityTokensWithBalances.map(({ tokens }) => tokens))\r\n  const v2IsLoading =\r\n    fetchingV2PairBalances || v2Pairs?.length < liquidityTokensWithBalances.length || v2Pairs?.some((V2Pair) => !V2Pair)\r\n\r\n  const allV2PairsWithLiquidity = v2Pairs.map(([, pair]) => pair).filter((v2Pair): v2Pair is Pair => Boolean(v2Pair))\r\n\r\n  // show liquidity even if its deposited in rewards contract\r\n  const stakingInfo = useStakingInfo()\r\n  const stakingInfosWithBalance = stakingInfo?.filter((pool) =>\r\n    JSBI.greaterThan(pool.stakedAmount.quotient, BIG_INT_ZERO)\r\n  )\r\n  const stakingPairs = useV2Pairs(stakingInfosWithBalance?.map((stakingInfo) => stakingInfo.tokens))\r\n\r\n  // remove any pairs that also are included in pairs with stake in mining pool\r\n  const v2PairsWithoutStakedAmount = allV2PairsWithLiquidity.filter((v2Pair) => {\r\n    return (\r\n      stakingPairs\r\n        ?.map((stakingPair) => stakingPair[1])\r\n        .filter((stakingPair) => stakingPair?.liquidityToken.address === v2Pair.liquidityToken.address).length === 0\r\n    )\r\n  })\r\n\r\n  return (\r\n    <Trace page={InterfacePageName.POOL_PAGE} shouldLogImpression>\r\n      <>\r\n        <PageWrapper>\r\n          <LPFeeExplainer>\r\n            <CardBGImage />\r\n            <CardNoise />\r\n            <CardSection>\r\n              <AutoColumn gap=\"md\">\r\n                <RowBetween>\r\n                  <ThemedText.DeprecatedWhite fontWeight={535}>\r\n                    <Trans>Liquidity provider rewards</Trans>\r\n                  </ThemedText.DeprecatedWhite>\r\n                </RowBetween>\r\n                <RowBetween>\r\n                  <ThemedText.DeprecatedWhite fontSize={14}>\r\n                    <Trans>\r\n                      Liquidity providers earn a 0.3% fee on all trades proportional to their share of the pool. Fees\r\n                      are added to the pool, accrue in real time and can be claimed by withdrawing your liquidity.\r\n                    </Trans>\r\n                  </ThemedText.DeprecatedWhite>\r\n                </RowBetween>\r\n                <ExternalLink\r\n                  style={{ color: theme.white, textDecoration: 'underline' }}\r\n                  target=\"_blank\"\r\n                  href=\"https://docs.uniswap.org/contracts/v2/concepts/core-concepts/pools\"\r\n                >\r\n                  <ThemedText.DeprecatedWhite fontSize={14}>\r\n                    <Trans>Read more about providing liquidity</Trans>\r\n                  </ThemedText.DeprecatedWhite>\r\n                </ExternalLink>\r\n              </AutoColumn>\r\n            </CardSection>\r\n            <CardBGImage />\r\n            <CardNoise />\r\n          </LPFeeExplainer>\r\n\r\n          {!networkSupportsV2 ? (\r\n            <V2Unsupported />\r\n          ) : (\r\n            <AutoColumn gap=\"lg\" justify=\"center\">\r\n              <AutoColumn gap=\"md\" style={{ width: '100%' }}>\r\n                <TitleRow style={{ marginTop: '1rem' }} padding=\"0\">\r\n                  <HideSmall>\r\n                    <ThemedText.DeprecatedMediumHeader style={{ marginTop: '0.5rem', justifySelf: 'flex-start' }}>\r\n                      <Trans>Your V2 liquidity</Trans>\r\n                    </ThemedText.DeprecatedMediumHeader>\r\n                  </HideSmall>\r\n                  <ButtonRow>\r\n                    <ResponsiveButtonSecondary as={Link} padding=\"6px 8px\" to=\"/add/v2/ETH\">\r\n                      <Trans>Create a pair</Trans>\r\n                    </ResponsiveButtonSecondary>\r\n                    <ResponsiveButtonPrimary id=\"find-pool-button\" as={Link} to=\"/pools/v2/find\" padding=\"6px 8px\">\r\n                      <Text fontWeight={535} fontSize={16}>\r\n                        <Trans>Import pool</Trans>\r\n                      </Text>\r\n                    </ResponsiveButtonPrimary>\r\n                    <ResponsiveButtonPrimary id=\"join-pool-button\" as={Link} to=\"/add/v2/ETH\" padding=\"6px 8px\">\r\n                      <Text fontWeight={535} fontSize={16}>\r\n                        <Trans>Add V2 liquidity</Trans>\r\n                      </Text>\r\n                    </ResponsiveButtonPrimary>\r\n                  </ButtonRow>\r\n                </TitleRow>\r\n\r\n                {!account ? (\r\n                  <Card padding=\"40px\">\r\n                    <ThemedText.DeprecatedBody color={theme.neutral3} textAlign=\"center\">\r\n                      <Trans>Connect to a wallet to view your liquidity.</Trans>\r\n                    </ThemedText.DeprecatedBody>\r\n                  </Card>\r\n                ) : v2IsLoading ? (\r\n                  <EmptyProposals>\r\n                    <ThemedText.DeprecatedBody color={theme.neutral3} textAlign=\"center\">\r\n                      <Dots>\r\n                        <Trans>Loading</Trans>\r\n                      </Dots>\r\n                    </ThemedText.DeprecatedBody>\r\n                  </EmptyProposals>\r\n                ) : allV2PairsWithLiquidity?.length > 0 || stakingPairs?.length > 0 ? (\r\n                  <>\r\n                    <ButtonSecondary>\r\n                      <RowBetween>\r\n                        <Trans>\r\n                          <ExternalLink href={'https://v2.info.uniswap.org/account/' + account}>\r\n                            Account analytics and accrued fees\r\n                          </ExternalLink>\r\n                          <span> ↗ </span>\r\n                        </Trans>\r\n                      </RowBetween>\r\n                    </ButtonSecondary>\r\n                    {v2PairsWithoutStakedAmount.map((v2Pair) => (\r\n                      <FullPositionCard key={v2Pair.liquidityToken.address} pair={v2Pair} />\r\n                    ))}\r\n                    {stakingPairs.map(\r\n                      (stakingPair, i) =>\r\n                        stakingPair[1] && ( // skip pairs that arent loaded\r\n                          <FullPositionCard\r\n                            key={stakingInfosWithBalance[i].stakingRewardAddress}\r\n                            pair={stakingPair[1]}\r\n                            stakedBalance={stakingInfosWithBalance[i].stakedAmount}\r\n                          />\r\n                        )\r\n                    )}\r\n                    <RowFixed justify=\"center\" style={{ width: '100%' }}>\r\n                      <ButtonOutlined\r\n                        as={Link}\r\n                        to=\"/migrate/v2\"\r\n                        id=\"import-pool-link\"\r\n                        style={{\r\n                          padding: '8px 16px',\r\n                          margin: '0 4px',\r\n                          borderRadius: '12px',\r\n                          width: 'fit-content',\r\n                          fontSize: '14px',\r\n                        }}\r\n                      >\r\n                        <ChevronsRight size={16} style={{ marginRight: '8px' }} />\r\n                        <Trans>Migrate liquidity to V3</Trans>\r\n                      </ButtonOutlined>\r\n                    </RowFixed>\r\n                  </>\r\n                ) : (\r\n                  <EmptyProposals>\r\n                    <ThemedText.DeprecatedBody color={theme.neutral3} textAlign=\"center\">\r\n                      <Trans>No liquidity found.</Trans>\r\n                    </ThemedText.DeprecatedBody>\r\n                  </EmptyProposals>\r\n                )}\r\n              </AutoColumn>\r\n            </AutoColumn>\r\n          )}\r\n        </PageWrapper>\r\n        <SwitchLocaleLink />\r\n      </>\r\n    </Trace>\r\n  )\r\n}\r\n","import { Currency } from '@uniswap/sdk-core'\r\nimport { asSupportedChain } from 'constants/chains'\r\n\r\nimport { nativeOnChain, WRAPPED_NATIVE_CURRENCY } from '../constants/tokens'\r\n\r\nexport function unwrappedToken(currency: Currency): Currency {\r\n  if (currency.isNative) return currency\r\n  const formattedChainId = asSupportedChain(currency.chainId)\r\n  if (formattedChainId && WRAPPED_NATIVE_CURRENCY[formattedChainId]?.equals(currency))\r\n    return nativeOnChain(currency.chainId)\r\n  return currency\r\n}\r\n"],"names":["STAKING_REWARDS_INTERFACE","Interface","StakingRewardsJSON","STAKING_REWARDS_INFO","tokens","WRAPPED_NATIVE_CURRENCY","ChainId","MAINNET","DAI","stakingRewardAddress","USDC_MAINNET","USDT","WBTC","PageWrapper","styled","AutoColumn","theme","deprecated_mediaWidth","deprecated_upToSmall","LPFeeExplainer","DataCard","TitleRow","RowBetween","ButtonRow","RowFixed","ResponsiveButtonPrimary","ButtonPrimary","ResponsiveButtonSecondary","ButtonSecondary","EmptyProposals","div","neutral2","Pool","useTheme","account","useWeb3React","networkSupportsV2","useNetworkSupportsV2","trackedTokenPairs","useTrackedTokenPairs","tokenPairsWithLiquidityTokens","useMemo","map","liquidityToken","toV2LiquidityToken","liquidityTokens","tpwlt","v2PairsBalances","fetchingV2PairBalances","useTokenBalancesWithLoadingIndicator","undefined","liquidityTokensWithBalances","filter","address","greaterThan","v2Pairs","useV2Pairs","v2IsLoading","length","some","V2Pair","allV2PairsWithLiquidity","pair","v2Pair","Boolean","stakingInfo","pairToFilterBy","chainId","currentBlockTimestamp","useCurrentBlockTimestamp","info","stakingRewardInfo","involvesToken","uni","UNI","rewardsAddresses","accountArg","balances","useMultipleContractSingleData","earnedAmounts","totalSupplies","rewardRates","NEVER_RELOAD","periodFinishes","reduce","memo","rewardsAddress","index","balanceState","earnedAmountState","totalSupplyState","rewardRateState","periodFinishState","loading","error","console","dummyPair","Pair","CurrencyAmount","fromRawAmount","stakedAmount","JSBI","result","totalStakedAmount","totalRewardRate","getHypotheticalRewardRate","quotient","individualRewardRate","periodFinishSeconds","toNumber","periodFinishMs","active","push","periodFinish","Date","earnedAmount","rewardRate","useStakingInfo","stakingInfosWithBalance","pool","BIG_INT_ZERO","stakingPairs","v2PairsWithoutStakedAmount","stakingPair","Trace","page","InterfacePageName","POOL_PAGE","shouldLogImpression","CardBGImage","CardNoise","CardSection","gap","ThemedText","DeprecatedWhite","fontWeight","fontSize","ExternalLink","style","color","white","textDecoration","target","href","justify","width","marginTop","padding","HideSmall","DeprecatedMediumHeader","justifySelf","as","Link","to","id","Text","DeprecatedBody","neutral3","textAlign","Dots","span","FullPositionCard","i","stakedBalance","ButtonOutlined","margin","borderRadius","ChevronsRight","size","marginRight","Card","V2Unsupported","SwitchLocaleLink","unwrappedToken","currency","isNative","formattedChainId","asSupportedChain","equals","nativeOnChain"],"sourceRoot":""}